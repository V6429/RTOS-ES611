
rtos_exp1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028c0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080029d0  080029d0  000129d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a28  08002a28  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002a28  08002a28  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a28  08002a28  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a28  08002a28  00012a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a2c  08002a2c  00012a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001008  20000010  08002a40  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001018  08002a40  00021018  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099de  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f25  00000000  00000000  00029a17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0002b940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  0002c3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017741  00000000  00000000  0002cd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab14  00000000  00000000  000444d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089412  00000000  00000000  0004efed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d83ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002998  00000000  00000000  000d8450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080029b8 	.word	0x080029b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080029b8 	.word	0x080029b8

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000002c 	.word	0x2000002c
 800017c:	20000080 	.word	0x20000080

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b088      	sub	sp, #32
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 f9d3 	bl	8000530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f81d 	bl	80001c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f887 	bl	80002a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000192:	f000 f85b 	bl	800024c <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000196:	4b0a      	ldr	r3, [pc, #40]	; (80001c0 <main+0x40>)
 8000198:	1d3c      	adds	r4, r7, #4
 800019a:	461d      	mov	r5, r3
 800019c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001a8:	1d3b      	adds	r3, r7, #4
 80001aa:	2100      	movs	r1, #0
 80001ac:	4618      	mov	r0, r3
 80001ae:	f001 fa01 	bl	80015b4 <osThreadCreate>
 80001b2:	4603      	mov	r3, r0
 80001b4:	4a03      	ldr	r2, [pc, #12]	; (80001c4 <main+0x44>)
 80001b6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001b8:	f001 f9f5 	bl	80015a6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001bc:	e7fe      	b.n	80001bc <main+0x3c>
 80001be:	bf00      	nop
 80001c0:	080029dc 	.word	0x080029dc
 80001c4:	200002c4 	.word	0x200002c4

080001c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b090      	sub	sp, #64	; 0x40
 80001cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ce:	f107 0318 	add.w	r3, r7, #24
 80001d2:	2228      	movs	r2, #40	; 0x28
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f002 fbe6 	bl	80029a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ea:	2302      	movs	r3, #2
 80001ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ee:	2301      	movs	r3, #1
 80001f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001f2:	2310      	movs	r3, #16
 80001f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f6:	2302      	movs	r3, #2
 80001f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001fa:	2300      	movs	r3, #0
 80001fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001fe:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000202:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000204:	f107 0318 	add.w	r3, r7, #24
 8000208:	4618      	mov	r0, r3
 800020a:	f000 fcbf 	bl	8000b8c <HAL_RCC_OscConfig>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d001      	beq.n	8000218 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000214:	f000 f8ba 	bl	800038c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000218:	230f      	movs	r3, #15
 800021a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800021c:	2302      	movs	r3, #2
 800021e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000220:	2300      	movs	r3, #0
 8000222:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000228:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	2102      	movs	r1, #2
 8000232:	4618      	mov	r0, r3
 8000234:	f000 ff2c 	bl	8001090 <HAL_RCC_ClockConfig>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800023e:	f000 f8a5 	bl	800038c <Error_Handler>
  }
}
 8000242:	bf00      	nop
 8000244:	3740      	adds	r7, #64	; 0x40
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
	...

0800024c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000250:	4b11      	ldr	r3, [pc, #68]	; (8000298 <MX_USART2_UART_Init+0x4c>)
 8000252:	4a12      	ldr	r2, [pc, #72]	; (800029c <MX_USART2_UART_Init+0x50>)
 8000254:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000256:	4b10      	ldr	r3, [pc, #64]	; (8000298 <MX_USART2_UART_Init+0x4c>)
 8000258:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800025c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800025e:	4b0e      	ldr	r3, [pc, #56]	; (8000298 <MX_USART2_UART_Init+0x4c>)
 8000260:	2200      	movs	r2, #0
 8000262:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <MX_USART2_UART_Init+0x4c>)
 8000266:	2200      	movs	r2, #0
 8000268:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800026a:	4b0b      	ldr	r3, [pc, #44]	; (8000298 <MX_USART2_UART_Init+0x4c>)
 800026c:	2200      	movs	r2, #0
 800026e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000270:	4b09      	ldr	r3, [pc, #36]	; (8000298 <MX_USART2_UART_Init+0x4c>)
 8000272:	220c      	movs	r2, #12
 8000274:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000276:	4b08      	ldr	r3, [pc, #32]	; (8000298 <MX_USART2_UART_Init+0x4c>)
 8000278:	2200      	movs	r2, #0
 800027a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800027c:	4b06      	ldr	r3, [pc, #24]	; (8000298 <MX_USART2_UART_Init+0x4c>)
 800027e:	2200      	movs	r2, #0
 8000280:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000282:	4805      	ldr	r0, [pc, #20]	; (8000298 <MX_USART2_UART_Init+0x4c>)
 8000284:	f001 f89c 	bl	80013c0 <HAL_UART_Init>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800028e:	f000 f87d 	bl	800038c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	20000280 	.word	0x20000280
 800029c:	40004400 	.word	0x40004400

080002a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b088      	sub	sp, #32
 80002a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a6:	f107 0310 	add.w	r3, r7, #16
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002b4:	4b2d      	ldr	r3, [pc, #180]	; (800036c <MX_GPIO_Init+0xcc>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a2c      	ldr	r2, [pc, #176]	; (800036c <MX_GPIO_Init+0xcc>)
 80002ba:	f043 0310 	orr.w	r3, r3, #16
 80002be:	6193      	str	r3, [r2, #24]
 80002c0:	4b2a      	ldr	r3, [pc, #168]	; (800036c <MX_GPIO_Init+0xcc>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	f003 0310 	and.w	r3, r3, #16
 80002c8:	60fb      	str	r3, [r7, #12]
 80002ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002cc:	4b27      	ldr	r3, [pc, #156]	; (800036c <MX_GPIO_Init+0xcc>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a26      	ldr	r2, [pc, #152]	; (800036c <MX_GPIO_Init+0xcc>)
 80002d2:	f043 0320 	orr.w	r3, r3, #32
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b24      	ldr	r3, [pc, #144]	; (800036c <MX_GPIO_Init+0xcc>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f003 0320 	and.w	r3, r3, #32
 80002e0:	60bb      	str	r3, [r7, #8]
 80002e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e4:	4b21      	ldr	r3, [pc, #132]	; (800036c <MX_GPIO_Init+0xcc>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a20      	ldr	r2, [pc, #128]	; (800036c <MX_GPIO_Init+0xcc>)
 80002ea:	f043 0304 	orr.w	r3, r3, #4
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b1e      	ldr	r3, [pc, #120]	; (800036c <MX_GPIO_Init+0xcc>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0304 	and.w	r3, r3, #4
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002fc:	4b1b      	ldr	r3, [pc, #108]	; (800036c <MX_GPIO_Init+0xcc>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a1a      	ldr	r2, [pc, #104]	; (800036c <MX_GPIO_Init+0xcc>)
 8000302:	f043 0308 	orr.w	r3, r3, #8
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b18      	ldr	r3, [pc, #96]	; (800036c <MX_GPIO_Init+0xcc>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0308 	and.w	r3, r3, #8
 8000310:	603b      	str	r3, [r7, #0]
 8000312:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000314:	2200      	movs	r2, #0
 8000316:	2120      	movs	r1, #32
 8000318:	4815      	ldr	r0, [pc, #84]	; (8000370 <MX_GPIO_Init+0xd0>)
 800031a:	f000 fbfd 	bl	8000b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800031e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000322:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000324:	4b13      	ldr	r3, [pc, #76]	; (8000374 <MX_GPIO_Init+0xd4>)
 8000326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000328:	2300      	movs	r3, #0
 800032a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800032c:	f107 0310 	add.w	r3, r7, #16
 8000330:	4619      	mov	r1, r3
 8000332:	4811      	ldr	r0, [pc, #68]	; (8000378 <MX_GPIO_Init+0xd8>)
 8000334:	f000 fa6c 	bl	8000810 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000338:	2320      	movs	r3, #32
 800033a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033c:	2301      	movs	r3, #1
 800033e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000340:	2300      	movs	r3, #0
 8000342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000344:	2302      	movs	r3, #2
 8000346:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000348:	f107 0310 	add.w	r3, r7, #16
 800034c:	4619      	mov	r1, r3
 800034e:	4808      	ldr	r0, [pc, #32]	; (8000370 <MX_GPIO_Init+0xd0>)
 8000350:	f000 fa5e 	bl	8000810 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000354:	2200      	movs	r2, #0
 8000356:	2105      	movs	r1, #5
 8000358:	2028      	movs	r0, #40	; 0x28
 800035a:	f000 fa22 	bl	80007a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800035e:	2028      	movs	r0, #40	; 0x28
 8000360:	f000 fa3b 	bl	80007da <HAL_NVIC_EnableIRQ>

}
 8000364:	bf00      	nop
 8000366:	3720      	adds	r7, #32
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	40021000 	.word	0x40021000
 8000370:	40010800 	.word	0x40010800
 8000374:	10110000 	.word	0x10110000
 8000378:	40011000 	.word	0x40011000

0800037c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000384:	2001      	movs	r0, #1
 8000386:	f001 f961 	bl	800164c <osDelay>
 800038a:	e7fb      	b.n	8000384 <StartDefaultTask+0x8>

0800038c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000390:	b672      	cpsid	i
}
 8000392:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000394:	e7fe      	b.n	8000394 <Error_Handler+0x8>
	...

08000398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800039e:	4b18      	ldr	r3, [pc, #96]	; (8000400 <HAL_MspInit+0x68>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	4a17      	ldr	r2, [pc, #92]	; (8000400 <HAL_MspInit+0x68>)
 80003a4:	f043 0301 	orr.w	r3, r3, #1
 80003a8:	6193      	str	r3, [r2, #24]
 80003aa:	4b15      	ldr	r3, [pc, #84]	; (8000400 <HAL_MspInit+0x68>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	f003 0301 	and.w	r3, r3, #1
 80003b2:	60bb      	str	r3, [r7, #8]
 80003b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003b6:	4b12      	ldr	r3, [pc, #72]	; (8000400 <HAL_MspInit+0x68>)
 80003b8:	69db      	ldr	r3, [r3, #28]
 80003ba:	4a11      	ldr	r2, [pc, #68]	; (8000400 <HAL_MspInit+0x68>)
 80003bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003c0:	61d3      	str	r3, [r2, #28]
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <HAL_MspInit+0x68>)
 80003c4:	69db      	ldr	r3, [r3, #28]
 80003c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80003ce:	2200      	movs	r2, #0
 80003d0:	210f      	movs	r1, #15
 80003d2:	f06f 0001 	mvn.w	r0, #1
 80003d6:	f000 f9e4 	bl	80007a2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003da:	4b0a      	ldr	r3, [pc, #40]	; (8000404 <HAL_MspInit+0x6c>)
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003ee:	60fb      	str	r3, [r7, #12]
 80003f0:	4a04      	ldr	r2, [pc, #16]	; (8000404 <HAL_MspInit+0x6c>)
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003f6:	bf00      	nop
 80003f8:	3710      	adds	r7, #16
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000
 8000404:	40010000 	.word	0x40010000

08000408 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b088      	sub	sp, #32
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000410:	f107 0310 	add.w	r3, r7, #16
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	605a      	str	r2, [r3, #4]
 800041a:	609a      	str	r2, [r3, #8]
 800041c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a15      	ldr	r2, [pc, #84]	; (8000478 <HAL_UART_MspInit+0x70>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d123      	bne.n	8000470 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000428:	4b14      	ldr	r3, [pc, #80]	; (800047c <HAL_UART_MspInit+0x74>)
 800042a:	69db      	ldr	r3, [r3, #28]
 800042c:	4a13      	ldr	r2, [pc, #76]	; (800047c <HAL_UART_MspInit+0x74>)
 800042e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000432:	61d3      	str	r3, [r2, #28]
 8000434:	4b11      	ldr	r3, [pc, #68]	; (800047c <HAL_UART_MspInit+0x74>)
 8000436:	69db      	ldr	r3, [r3, #28]
 8000438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800043c:	60fb      	str	r3, [r7, #12]
 800043e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000440:	4b0e      	ldr	r3, [pc, #56]	; (800047c <HAL_UART_MspInit+0x74>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a0d      	ldr	r2, [pc, #52]	; (800047c <HAL_UART_MspInit+0x74>)
 8000446:	f043 0304 	orr.w	r3, r3, #4
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b0b      	ldr	r3, [pc, #44]	; (800047c <HAL_UART_MspInit+0x74>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0304 	and.w	r3, r3, #4
 8000454:	60bb      	str	r3, [r7, #8]
 8000456:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000458:	230c      	movs	r3, #12
 800045a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800045c:	2302      	movs	r3, #2
 800045e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000460:	2302      	movs	r3, #2
 8000462:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000464:	f107 0310 	add.w	r3, r7, #16
 8000468:	4619      	mov	r1, r3
 800046a:	4805      	ldr	r0, [pc, #20]	; (8000480 <HAL_UART_MspInit+0x78>)
 800046c:	f000 f9d0 	bl	8000810 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000470:	bf00      	nop
 8000472:	3720      	adds	r7, #32
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40004400 	.word	0x40004400
 800047c:	40021000 	.word	0x40021000
 8000480:	40010800 	.word	0x40010800

08000484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000488:	e7fe      	b.n	8000488 <NMI_Handler+0x4>

0800048a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800048e:	e7fe      	b.n	800048e <HardFault_Handler+0x4>

08000490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000494:	e7fe      	b.n	8000494 <MemManage_Handler+0x4>

08000496 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800049a:	e7fe      	b.n	800049a <BusFault_Handler+0x4>

0800049c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <UsageFault_Handler+0x4>

080004a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004a6:	bf00      	nop
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr

080004ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ae:	b580      	push	{r7, lr}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004b2:	f000 f883 	bl	80005bc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80004b6:	f001 fe47 	bl	8002148 <xTaskGetSchedulerState>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d001      	beq.n	80004c4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80004c0:	f002 f832 	bl	8002528 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004c4:	bf00      	nop
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80004cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80004d0:	f000 fb3a 	bl	8000b48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e4:	480c      	ldr	r0, [pc, #48]	; (8000518 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004e6:	490d      	ldr	r1, [pc, #52]	; (800051c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004e8:	4a0d      	ldr	r2, [pc, #52]	; (8000520 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ec:	e002      	b.n	80004f4 <LoopCopyDataInit>

080004ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f2:	3304      	adds	r3, #4

080004f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f8:	d3f9      	bcc.n	80004ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fa:	4a0a      	ldr	r2, [pc, #40]	; (8000524 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004fc:	4c0a      	ldr	r4, [pc, #40]	; (8000528 <LoopFillZerobss+0x22>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000500:	e001      	b.n	8000506 <LoopFillZerobss>

08000502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000504:	3204      	adds	r2, #4

08000506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000508:	d3fb      	bcc.n	8000502 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800050a:	f7ff ffe5 	bl	80004d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800050e:	f002 fa27 	bl	8002960 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000512:	f7ff fe35 	bl	8000180 <main>
  bx lr
 8000516:	4770      	bx	lr
  ldr r0, =_sdata
 8000518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800051c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000520:	08002a30 	.word	0x08002a30
  ldr r2, =_sbss
 8000524:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000528:	20001018 	.word	0x20001018

0800052c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800052c:	e7fe      	b.n	800052c <ADC1_2_IRQHandler>
	...

08000530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <HAL_Init+0x28>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a07      	ldr	r2, [pc, #28]	; (8000558 <HAL_Init+0x28>)
 800053a:	f043 0310 	orr.w	r3, r3, #16
 800053e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000540:	2003      	movs	r0, #3
 8000542:	f000 f923 	bl	800078c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000546:	200f      	movs	r0, #15
 8000548:	f000 f808 	bl	800055c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800054c:	f7ff ff24 	bl	8000398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000550:	2300      	movs	r3, #0
}
 8000552:	4618      	mov	r0, r3
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40022000 	.word	0x40022000

0800055c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_InitTick+0x54>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <HAL_InitTick+0x58>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	4619      	mov	r1, r3
 800056e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000572:	fbb3 f3f1 	udiv	r3, r3, r1
 8000576:	fbb2 f3f3 	udiv	r3, r2, r3
 800057a:	4618      	mov	r0, r3
 800057c:	f000 f93b 	bl	80007f6 <HAL_SYSTICK_Config>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000586:	2301      	movs	r3, #1
 8000588:	e00e      	b.n	80005a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2b0f      	cmp	r3, #15
 800058e:	d80a      	bhi.n	80005a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000590:	2200      	movs	r2, #0
 8000592:	6879      	ldr	r1, [r7, #4]
 8000594:	f04f 30ff 	mov.w	r0, #4294967295
 8000598:	f000 f903 	bl	80007a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <HAL_InitTick+0x5c>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005a2:	2300      	movs	r3, #0
 80005a4:	e000      	b.n	80005a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005a6:	2301      	movs	r3, #1
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000000 	.word	0x20000000
 80005b4:	20000008 	.word	0x20000008
 80005b8:	20000004 	.word	0x20000004

080005bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <HAL_IncTick+0x1c>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b05      	ldr	r3, [pc, #20]	; (80005dc <HAL_IncTick+0x20>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4413      	add	r3, r2
 80005cc:	4a03      	ldr	r2, [pc, #12]	; (80005dc <HAL_IncTick+0x20>)
 80005ce:	6013      	str	r3, [r2, #0]
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr
 80005d8:	20000008 	.word	0x20000008
 80005dc:	200002c8 	.word	0x200002c8

080005e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return uwTick;
 80005e4:	4b02      	ldr	r3, [pc, #8]	; (80005f0 <HAL_GetTick+0x10>)
 80005e6:	681b      	ldr	r3, [r3, #0]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	200002c8 	.word	0x200002c8

080005f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800061c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000626:	4a04      	ldr	r2, [pc, #16]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	60d3      	str	r3, [r2, #12]
}
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <__NVIC_GetPriorityGrouping+0x18>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	f003 0307 	and.w	r3, r3, #7
}
 800064a:	4618      	mov	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	2b00      	cmp	r3, #0
 8000668:	db0b      	blt.n	8000682 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	f003 021f 	and.w	r2, r3, #31
 8000670:	4906      	ldr	r1, [pc, #24]	; (800068c <__NVIC_EnableIRQ+0x34>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	095b      	lsrs	r3, r3, #5
 8000678:	2001      	movs	r0, #1
 800067a:	fa00 f202 	lsl.w	r2, r0, r2
 800067e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr
 800068c:	e000e100 	.word	0xe000e100

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	; (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	; (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	; 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3b01      	subs	r3, #1
 8000754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000758:	d301      	bcc.n	800075e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075a:	2301      	movs	r3, #1
 800075c:	e00f      	b.n	800077e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <SysTick_Config+0x40>)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000766:	210f      	movs	r1, #15
 8000768:	f04f 30ff 	mov.w	r0, #4294967295
 800076c:	f7ff ff90 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <SysTick_Config+0x40>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000776:	4b04      	ldr	r3, [pc, #16]	; (8000788 <SysTick_Config+0x40>)
 8000778:	2207      	movs	r2, #7
 800077a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	e000e010 	.word	0xe000e010

0800078c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff ff2d 	bl	80005f4 <__NVIC_SetPriorityGrouping>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b086      	sub	sp, #24
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b4:	f7ff ff42 	bl	800063c <__NVIC_GetPriorityGrouping>
 80007b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	68b9      	ldr	r1, [r7, #8]
 80007be:	6978      	ldr	r0, [r7, #20]
 80007c0:	f7ff ff90 	bl	80006e4 <NVIC_EncodePriority>
 80007c4:	4602      	mov	r2, r0
 80007c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ca:	4611      	mov	r1, r2
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ff5f 	bl	8000690 <__NVIC_SetPriority>
}
 80007d2:	bf00      	nop
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff35 	bl	8000658 <__NVIC_EnableIRQ>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff ffa2 	bl	8000748 <SysTick_Config>
 8000804:	4603      	mov	r3, r0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000810:	b480      	push	{r7}
 8000812:	b08b      	sub	sp, #44	; 0x2c
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800081e:	2300      	movs	r3, #0
 8000820:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000822:	e169      	b.n	8000af8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000824:	2201      	movs	r2, #1
 8000826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000828:	fa02 f303 	lsl.w	r3, r2, r3
 800082c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	69fa      	ldr	r2, [r7, #28]
 8000834:	4013      	ands	r3, r2
 8000836:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000838:	69ba      	ldr	r2, [r7, #24]
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	429a      	cmp	r2, r3
 800083e:	f040 8158 	bne.w	8000af2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	4a9a      	ldr	r2, [pc, #616]	; (8000ab0 <HAL_GPIO_Init+0x2a0>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d05e      	beq.n	800090a <HAL_GPIO_Init+0xfa>
 800084c:	4a98      	ldr	r2, [pc, #608]	; (8000ab0 <HAL_GPIO_Init+0x2a0>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d875      	bhi.n	800093e <HAL_GPIO_Init+0x12e>
 8000852:	4a98      	ldr	r2, [pc, #608]	; (8000ab4 <HAL_GPIO_Init+0x2a4>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d058      	beq.n	800090a <HAL_GPIO_Init+0xfa>
 8000858:	4a96      	ldr	r2, [pc, #600]	; (8000ab4 <HAL_GPIO_Init+0x2a4>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d86f      	bhi.n	800093e <HAL_GPIO_Init+0x12e>
 800085e:	4a96      	ldr	r2, [pc, #600]	; (8000ab8 <HAL_GPIO_Init+0x2a8>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d052      	beq.n	800090a <HAL_GPIO_Init+0xfa>
 8000864:	4a94      	ldr	r2, [pc, #592]	; (8000ab8 <HAL_GPIO_Init+0x2a8>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d869      	bhi.n	800093e <HAL_GPIO_Init+0x12e>
 800086a:	4a94      	ldr	r2, [pc, #592]	; (8000abc <HAL_GPIO_Init+0x2ac>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d04c      	beq.n	800090a <HAL_GPIO_Init+0xfa>
 8000870:	4a92      	ldr	r2, [pc, #584]	; (8000abc <HAL_GPIO_Init+0x2ac>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d863      	bhi.n	800093e <HAL_GPIO_Init+0x12e>
 8000876:	4a92      	ldr	r2, [pc, #584]	; (8000ac0 <HAL_GPIO_Init+0x2b0>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d046      	beq.n	800090a <HAL_GPIO_Init+0xfa>
 800087c:	4a90      	ldr	r2, [pc, #576]	; (8000ac0 <HAL_GPIO_Init+0x2b0>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d85d      	bhi.n	800093e <HAL_GPIO_Init+0x12e>
 8000882:	2b12      	cmp	r3, #18
 8000884:	d82a      	bhi.n	80008dc <HAL_GPIO_Init+0xcc>
 8000886:	2b12      	cmp	r3, #18
 8000888:	d859      	bhi.n	800093e <HAL_GPIO_Init+0x12e>
 800088a:	a201      	add	r2, pc, #4	; (adr r2, 8000890 <HAL_GPIO_Init+0x80>)
 800088c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000890:	0800090b 	.word	0x0800090b
 8000894:	080008e5 	.word	0x080008e5
 8000898:	080008f7 	.word	0x080008f7
 800089c:	08000939 	.word	0x08000939
 80008a0:	0800093f 	.word	0x0800093f
 80008a4:	0800093f 	.word	0x0800093f
 80008a8:	0800093f 	.word	0x0800093f
 80008ac:	0800093f 	.word	0x0800093f
 80008b0:	0800093f 	.word	0x0800093f
 80008b4:	0800093f 	.word	0x0800093f
 80008b8:	0800093f 	.word	0x0800093f
 80008bc:	0800093f 	.word	0x0800093f
 80008c0:	0800093f 	.word	0x0800093f
 80008c4:	0800093f 	.word	0x0800093f
 80008c8:	0800093f 	.word	0x0800093f
 80008cc:	0800093f 	.word	0x0800093f
 80008d0:	0800093f 	.word	0x0800093f
 80008d4:	080008ed 	.word	0x080008ed
 80008d8:	08000901 	.word	0x08000901
 80008dc:	4a79      	ldr	r2, [pc, #484]	; (8000ac4 <HAL_GPIO_Init+0x2b4>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d013      	beq.n	800090a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008e2:	e02c      	b.n	800093e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	623b      	str	r3, [r7, #32]
          break;
 80008ea:	e029      	b.n	8000940 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	3304      	adds	r3, #4
 80008f2:	623b      	str	r3, [r7, #32]
          break;
 80008f4:	e024      	b.n	8000940 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	68db      	ldr	r3, [r3, #12]
 80008fa:	3308      	adds	r3, #8
 80008fc:	623b      	str	r3, [r7, #32]
          break;
 80008fe:	e01f      	b.n	8000940 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	330c      	adds	r3, #12
 8000906:	623b      	str	r3, [r7, #32]
          break;
 8000908:	e01a      	b.n	8000940 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d102      	bne.n	8000918 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000912:	2304      	movs	r3, #4
 8000914:	623b      	str	r3, [r7, #32]
          break;
 8000916:	e013      	b.n	8000940 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d105      	bne.n	800092c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000920:	2308      	movs	r3, #8
 8000922:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	69fa      	ldr	r2, [r7, #28]
 8000928:	611a      	str	r2, [r3, #16]
          break;
 800092a:	e009      	b.n	8000940 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800092c:	2308      	movs	r3, #8
 800092e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	69fa      	ldr	r2, [r7, #28]
 8000934:	615a      	str	r2, [r3, #20]
          break;
 8000936:	e003      	b.n	8000940 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000938:	2300      	movs	r3, #0
 800093a:	623b      	str	r3, [r7, #32]
          break;
 800093c:	e000      	b.n	8000940 <HAL_GPIO_Init+0x130>
          break;
 800093e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	2bff      	cmp	r3, #255	; 0xff
 8000944:	d801      	bhi.n	800094a <HAL_GPIO_Init+0x13a>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	e001      	b.n	800094e <HAL_GPIO_Init+0x13e>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3304      	adds	r3, #4
 800094e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	2bff      	cmp	r3, #255	; 0xff
 8000954:	d802      	bhi.n	800095c <HAL_GPIO_Init+0x14c>
 8000956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	e002      	b.n	8000962 <HAL_GPIO_Init+0x152>
 800095c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095e:	3b08      	subs	r3, #8
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	210f      	movs	r1, #15
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	fa01 f303 	lsl.w	r3, r1, r3
 8000970:	43db      	mvns	r3, r3
 8000972:	401a      	ands	r2, r3
 8000974:	6a39      	ldr	r1, [r7, #32]
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	fa01 f303 	lsl.w	r3, r1, r3
 800097c:	431a      	orrs	r2, r3
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098a:	2b00      	cmp	r3, #0
 800098c:	f000 80b1 	beq.w	8000af2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000990:	4b4d      	ldr	r3, [pc, #308]	; (8000ac8 <HAL_GPIO_Init+0x2b8>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	4a4c      	ldr	r2, [pc, #304]	; (8000ac8 <HAL_GPIO_Init+0x2b8>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	6193      	str	r3, [r2, #24]
 800099c:	4b4a      	ldr	r3, [pc, #296]	; (8000ac8 <HAL_GPIO_Init+0x2b8>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009a8:	4a48      	ldr	r2, [pc, #288]	; (8000acc <HAL_GPIO_Init+0x2bc>)
 80009aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ac:	089b      	lsrs	r3, r3, #2
 80009ae:	3302      	adds	r3, #2
 80009b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b8:	f003 0303 	and.w	r3, r3, #3
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	220f      	movs	r2, #15
 80009c0:	fa02 f303 	lsl.w	r3, r2, r3
 80009c4:	43db      	mvns	r3, r3
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	4013      	ands	r3, r2
 80009ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a40      	ldr	r2, [pc, #256]	; (8000ad0 <HAL_GPIO_Init+0x2c0>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d013      	beq.n	80009fc <HAL_GPIO_Init+0x1ec>
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a3f      	ldr	r2, [pc, #252]	; (8000ad4 <HAL_GPIO_Init+0x2c4>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d00d      	beq.n	80009f8 <HAL_GPIO_Init+0x1e8>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a3e      	ldr	r2, [pc, #248]	; (8000ad8 <HAL_GPIO_Init+0x2c8>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d007      	beq.n	80009f4 <HAL_GPIO_Init+0x1e4>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a3d      	ldr	r2, [pc, #244]	; (8000adc <HAL_GPIO_Init+0x2cc>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d101      	bne.n	80009f0 <HAL_GPIO_Init+0x1e0>
 80009ec:	2303      	movs	r3, #3
 80009ee:	e006      	b.n	80009fe <HAL_GPIO_Init+0x1ee>
 80009f0:	2304      	movs	r3, #4
 80009f2:	e004      	b.n	80009fe <HAL_GPIO_Init+0x1ee>
 80009f4:	2302      	movs	r3, #2
 80009f6:	e002      	b.n	80009fe <HAL_GPIO_Init+0x1ee>
 80009f8:	2301      	movs	r3, #1
 80009fa:	e000      	b.n	80009fe <HAL_GPIO_Init+0x1ee>
 80009fc:	2300      	movs	r3, #0
 80009fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a00:	f002 0203 	and.w	r2, r2, #3
 8000a04:	0092      	lsls	r2, r2, #2
 8000a06:	4093      	lsls	r3, r2
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a0e:	492f      	ldr	r1, [pc, #188]	; (8000acc <HAL_GPIO_Init+0x2bc>)
 8000a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a12:	089b      	lsrs	r3, r3, #2
 8000a14:	3302      	adds	r3, #2
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d006      	beq.n	8000a36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a28:	4b2d      	ldr	r3, [pc, #180]	; (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	492c      	ldr	r1, [pc, #176]	; (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a2e:	69bb      	ldr	r3, [r7, #24]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	600b      	str	r3, [r1, #0]
 8000a34:	e006      	b.n	8000a44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a36:	4b2a      	ldr	r3, [pc, #168]	; (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	4928      	ldr	r1, [pc, #160]	; (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a40:	4013      	ands	r3, r2
 8000a42:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d006      	beq.n	8000a5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a50:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a52:	685a      	ldr	r2, [r3, #4]
 8000a54:	4922      	ldr	r1, [pc, #136]	; (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	604b      	str	r3, [r1, #4]
 8000a5c:	e006      	b.n	8000a6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a5e:	4b20      	ldr	r3, [pc, #128]	; (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a60:	685a      	ldr	r2, [r3, #4]
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	43db      	mvns	r3, r3
 8000a66:	491e      	ldr	r1, [pc, #120]	; (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a68:	4013      	ands	r3, r2
 8000a6a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d006      	beq.n	8000a86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a78:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a7a:	689a      	ldr	r2, [r3, #8]
 8000a7c:	4918      	ldr	r1, [pc, #96]	; (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	608b      	str	r3, [r1, #8]
 8000a84:	e006      	b.n	8000a94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a86:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a88:	689a      	ldr	r2, [r3, #8]
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	4914      	ldr	r1, [pc, #80]	; (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000a90:	4013      	ands	r3, r2
 8000a92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d021      	beq.n	8000ae4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000aa2:	68da      	ldr	r2, [r3, #12]
 8000aa4:	490e      	ldr	r1, [pc, #56]	; (8000ae0 <HAL_GPIO_Init+0x2d0>)
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	60cb      	str	r3, [r1, #12]
 8000aac:	e021      	b.n	8000af2 <HAL_GPIO_Init+0x2e2>
 8000aae:	bf00      	nop
 8000ab0:	10320000 	.word	0x10320000
 8000ab4:	10310000 	.word	0x10310000
 8000ab8:	10220000 	.word	0x10220000
 8000abc:	10210000 	.word	0x10210000
 8000ac0:	10120000 	.word	0x10120000
 8000ac4:	10110000 	.word	0x10110000
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40010000 	.word	0x40010000
 8000ad0:	40010800 	.word	0x40010800
 8000ad4:	40010c00 	.word	0x40010c00
 8000ad8:	40011000 	.word	0x40011000
 8000adc:	40011400 	.word	0x40011400
 8000ae0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <HAL_GPIO_Init+0x304>)
 8000ae6:	68da      	ldr	r2, [r3, #12]
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	43db      	mvns	r3, r3
 8000aec:	4909      	ldr	r1, [pc, #36]	; (8000b14 <HAL_GPIO_Init+0x304>)
 8000aee:	4013      	ands	r3, r2
 8000af0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af4:	3301      	adds	r3, #1
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afe:	fa22 f303 	lsr.w	r3, r2, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	f47f ae8e 	bne.w	8000824 <HAL_GPIO_Init+0x14>
  }
}
 8000b08:	bf00      	nop
 8000b0a:	bf00      	nop
 8000b0c:	372c      	adds	r7, #44	; 0x2c
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	40010400 	.word	0x40010400

08000b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	460b      	mov	r3, r1
 8000b22:	807b      	strh	r3, [r7, #2]
 8000b24:	4613      	mov	r3, r2
 8000b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b28:	787b      	ldrb	r3, [r7, #1]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d003      	beq.n	8000b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b2e:	887a      	ldrh	r2, [r7, #2]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b34:	e003      	b.n	8000b3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b36:	887b      	ldrh	r3, [r7, #2]
 8000b38:	041a      	lsls	r2, r3, #16
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	611a      	str	r2, [r3, #16]
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr

08000b48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b54:	695a      	ldr	r2, [r3, #20]
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d006      	beq.n	8000b6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b60:	88fb      	ldrh	r3, [r7, #6]
 8000b62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b64:	88fb      	ldrh	r3, [r7, #6]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 f806 	bl	8000b78 <HAL_GPIO_EXTI_Callback>
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40010400 	.word	0x40010400

08000b78 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d101      	bne.n	8000b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e272      	b.n	8001084 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f000 8087 	beq.w	8000cba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bac:	4b92      	ldr	r3, [pc, #584]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f003 030c 	and.w	r3, r3, #12
 8000bb4:	2b04      	cmp	r3, #4
 8000bb6:	d00c      	beq.n	8000bd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bb8:	4b8f      	ldr	r3, [pc, #572]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f003 030c 	and.w	r3, r3, #12
 8000bc0:	2b08      	cmp	r3, #8
 8000bc2:	d112      	bne.n	8000bea <HAL_RCC_OscConfig+0x5e>
 8000bc4:	4b8c      	ldr	r3, [pc, #560]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bd0:	d10b      	bne.n	8000bea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bd2:	4b89      	ldr	r3, [pc, #548]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d06c      	beq.n	8000cb8 <HAL_RCC_OscConfig+0x12c>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d168      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e24c      	b.n	8001084 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bf2:	d106      	bne.n	8000c02 <HAL_RCC_OscConfig+0x76>
 8000bf4:	4b80      	ldr	r3, [pc, #512]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a7f      	ldr	r2, [pc, #508]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bfe:	6013      	str	r3, [r2, #0]
 8000c00:	e02e      	b.n	8000c60 <HAL_RCC_OscConfig+0xd4>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d10c      	bne.n	8000c24 <HAL_RCC_OscConfig+0x98>
 8000c0a:	4b7b      	ldr	r3, [pc, #492]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a7a      	ldr	r2, [pc, #488]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c14:	6013      	str	r3, [r2, #0]
 8000c16:	4b78      	ldr	r3, [pc, #480]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a77      	ldr	r2, [pc, #476]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c20:	6013      	str	r3, [r2, #0]
 8000c22:	e01d      	b.n	8000c60 <HAL_RCC_OscConfig+0xd4>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c2c:	d10c      	bne.n	8000c48 <HAL_RCC_OscConfig+0xbc>
 8000c2e:	4b72      	ldr	r3, [pc, #456]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a71      	ldr	r2, [pc, #452]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c38:	6013      	str	r3, [r2, #0]
 8000c3a:	4b6f      	ldr	r3, [pc, #444]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a6e      	ldr	r2, [pc, #440]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	e00b      	b.n	8000c60 <HAL_RCC_OscConfig+0xd4>
 8000c48:	4b6b      	ldr	r3, [pc, #428]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a6a      	ldr	r2, [pc, #424]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c52:	6013      	str	r3, [r2, #0]
 8000c54:	4b68      	ldr	r3, [pc, #416]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a67      	ldr	r2, [pc, #412]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d013      	beq.n	8000c90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c68:	f7ff fcba 	bl	80005e0 <HAL_GetTick>
 8000c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c6e:	e008      	b.n	8000c82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c70:	f7ff fcb6 	bl	80005e0 <HAL_GetTick>
 8000c74:	4602      	mov	r2, r0
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	2b64      	cmp	r3, #100	; 0x64
 8000c7c:	d901      	bls.n	8000c82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	e200      	b.n	8001084 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c82:	4b5d      	ldr	r3, [pc, #372]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d0f0      	beq.n	8000c70 <HAL_RCC_OscConfig+0xe4>
 8000c8e:	e014      	b.n	8000cba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c90:	f7ff fca6 	bl	80005e0 <HAL_GetTick>
 8000c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c96:	e008      	b.n	8000caa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c98:	f7ff fca2 	bl	80005e0 <HAL_GetTick>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	2b64      	cmp	r3, #100	; 0x64
 8000ca4:	d901      	bls.n	8000caa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	e1ec      	b.n	8001084 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000caa:	4b53      	ldr	r3, [pc, #332]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d1f0      	bne.n	8000c98 <HAL_RCC_OscConfig+0x10c>
 8000cb6:	e000      	b.n	8000cba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d063      	beq.n	8000d8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cc6:	4b4c      	ldr	r3, [pc, #304]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f003 030c 	and.w	r3, r3, #12
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d00b      	beq.n	8000cea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cd2:	4b49      	ldr	r3, [pc, #292]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f003 030c 	and.w	r3, r3, #12
 8000cda:	2b08      	cmp	r3, #8
 8000cdc:	d11c      	bne.n	8000d18 <HAL_RCC_OscConfig+0x18c>
 8000cde:	4b46      	ldr	r3, [pc, #280]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d116      	bne.n	8000d18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cea:	4b43      	ldr	r3, [pc, #268]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d005      	beq.n	8000d02 <HAL_RCC_OscConfig+0x176>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	691b      	ldr	r3, [r3, #16]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d001      	beq.n	8000d02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e1c0      	b.n	8001084 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d02:	4b3d      	ldr	r3, [pc, #244]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	4939      	ldr	r1, [pc, #228]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000d12:	4313      	orrs	r3, r2
 8000d14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d16:	e03a      	b.n	8000d8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	691b      	ldr	r3, [r3, #16]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d020      	beq.n	8000d62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d20:	4b36      	ldr	r3, [pc, #216]	; (8000dfc <HAL_RCC_OscConfig+0x270>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d26:	f7ff fc5b 	bl	80005e0 <HAL_GetTick>
 8000d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d2c:	e008      	b.n	8000d40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d2e:	f7ff fc57 	bl	80005e0 <HAL_GetTick>
 8000d32:	4602      	mov	r2, r0
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d901      	bls.n	8000d40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	e1a1      	b.n	8001084 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d40:	4b2d      	ldr	r3, [pc, #180]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f003 0302 	and.w	r3, r3, #2
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d0f0      	beq.n	8000d2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d4c:	4b2a      	ldr	r3, [pc, #168]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	695b      	ldr	r3, [r3, #20]
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	4927      	ldr	r1, [pc, #156]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	600b      	str	r3, [r1, #0]
 8000d60:	e015      	b.n	8000d8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d62:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <HAL_RCC_OscConfig+0x270>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d68:	f7ff fc3a 	bl	80005e0 <HAL_GetTick>
 8000d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d6e:	e008      	b.n	8000d82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d70:	f7ff fc36 	bl	80005e0 <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d901      	bls.n	8000d82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e180      	b.n	8001084 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d82:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1f0      	bne.n	8000d70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0308 	and.w	r3, r3, #8
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d03a      	beq.n	8000e10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d019      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000da2:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <HAL_RCC_OscConfig+0x274>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da8:	f7ff fc1a 	bl	80005e0 <HAL_GetTick>
 8000dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dae:	e008      	b.n	8000dc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000db0:	f7ff fc16 	bl	80005e0 <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d901      	bls.n	8000dc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	e160      	b.n	8001084 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d0f0      	beq.n	8000db0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f000 fad8 	bl	8001384 <RCC_Delay>
 8000dd4:	e01c      	b.n	8000e10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <HAL_RCC_OscConfig+0x274>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ddc:	f7ff fc00 	bl	80005e0 <HAL_GetTick>
 8000de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000de2:	e00f      	b.n	8000e04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000de4:	f7ff fbfc 	bl	80005e0 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d908      	bls.n	8000e04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e146      	b.n	8001084 <HAL_RCC_OscConfig+0x4f8>
 8000df6:	bf00      	nop
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	42420000 	.word	0x42420000
 8000e00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e04:	4b92      	ldr	r3, [pc, #584]	; (8001050 <HAL_RCC_OscConfig+0x4c4>)
 8000e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e08:	f003 0302 	and.w	r3, r3, #2
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1e9      	bne.n	8000de4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f003 0304 	and.w	r3, r3, #4
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	f000 80a6 	beq.w	8000f6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e22:	4b8b      	ldr	r3, [pc, #556]	; (8001050 <HAL_RCC_OscConfig+0x4c4>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d10d      	bne.n	8000e4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	4b88      	ldr	r3, [pc, #544]	; (8001050 <HAL_RCC_OscConfig+0x4c4>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	4a87      	ldr	r2, [pc, #540]	; (8001050 <HAL_RCC_OscConfig+0x4c4>)
 8000e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e38:	61d3      	str	r3, [r2, #28]
 8000e3a:	4b85      	ldr	r3, [pc, #532]	; (8001050 <HAL_RCC_OscConfig+0x4c4>)
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e46:	2301      	movs	r3, #1
 8000e48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e4a:	4b82      	ldr	r3, [pc, #520]	; (8001054 <HAL_RCC_OscConfig+0x4c8>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d118      	bne.n	8000e88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e56:	4b7f      	ldr	r3, [pc, #508]	; (8001054 <HAL_RCC_OscConfig+0x4c8>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a7e      	ldr	r2, [pc, #504]	; (8001054 <HAL_RCC_OscConfig+0x4c8>)
 8000e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e62:	f7ff fbbd 	bl	80005e0 <HAL_GetTick>
 8000e66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e68:	e008      	b.n	8000e7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e6a:	f7ff fbb9 	bl	80005e0 <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	2b64      	cmp	r3, #100	; 0x64
 8000e76:	d901      	bls.n	8000e7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e103      	b.n	8001084 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e7c:	4b75      	ldr	r3, [pc, #468]	; (8001054 <HAL_RCC_OscConfig+0x4c8>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0f0      	beq.n	8000e6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d106      	bne.n	8000e9e <HAL_RCC_OscConfig+0x312>
 8000e90:	4b6f      	ldr	r3, [pc, #444]	; (8001050 <HAL_RCC_OscConfig+0x4c4>)
 8000e92:	6a1b      	ldr	r3, [r3, #32]
 8000e94:	4a6e      	ldr	r2, [pc, #440]	; (8001050 <HAL_RCC_OscConfig+0x4c4>)
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	6213      	str	r3, [r2, #32]
 8000e9c:	e02d      	b.n	8000efa <HAL_RCC_OscConfig+0x36e>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d10c      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x334>
 8000ea6:	4b6a      	ldr	r3, [pc, #424]	; (8001050 <HAL_RCC_OscConfig+0x4c4>)
 8000ea8:	6a1b      	ldr	r3, [r3, #32]
 8000eaa:	4a69      	ldr	r2, [pc, #420]	; (8001050 <HAL_RCC_OscConfig+0x4c4>)
 8000eac:	f023 0301 	bic.w	r3, r3, #1
 8000eb0:	6213      	str	r3, [r2, #32]
 8000eb2:	4b67      	ldr	r3, [pc, #412]	; (8001050 <HAL_RCC_OscConfig+0x4c4>)
 8000eb4:	6a1b      	ldr	r3, [r3, #32]
 8000eb6:	4a66      	ldr	r2, [pc, #408]	; (8001050 <HAL_RCC_OscConfig+0x4c4>)
 8000eb8:	f023 0304 	bic.w	r3, r3, #4
 8000ebc:	6213      	str	r3, [r2, #32]
 8000ebe:	e01c      	b.n	8000efa <HAL_RCC_OscConfig+0x36e>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	2b05      	cmp	r3, #5
 8000ec6:	d10c      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x356>
 8000ec8:	4b61      	ldr	r3, [pc, #388]	; (8001050 <HAL_RCC_OscConfig+0x4c4>)
 8000eca:	6a1b      	ldr	r3, [r3, #32]
 8000ecc:	4a60      	ldr	r2, [pc, #384]	; (8001050 <HAL_RCC_OscConfig+0x4c4>)
 8000ece:	f043 0304 	orr.w	r3, r3, #4
 8000ed2:	6213      	str	r3, [r2, #32]
 8000ed4:	4b5e      	ldr	r3, [pc, #376]	; (8001050 <HAL_RCC_OscConfig+0x4c4>)
 8000ed6:	6a1b      	ldr	r3, [r3, #32]
 8000ed8:	4a5d      	ldr	r2, [pc, #372]	; (8001050 <HAL_RCC_OscConfig+0x4c4>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6213      	str	r3, [r2, #32]
 8000ee0:	e00b      	b.n	8000efa <HAL_RCC_OscConfig+0x36e>
 8000ee2:	4b5b      	ldr	r3, [pc, #364]	; (8001050 <HAL_RCC_OscConfig+0x4c4>)
 8000ee4:	6a1b      	ldr	r3, [r3, #32]
 8000ee6:	4a5a      	ldr	r2, [pc, #360]	; (8001050 <HAL_RCC_OscConfig+0x4c4>)
 8000ee8:	f023 0301 	bic.w	r3, r3, #1
 8000eec:	6213      	str	r3, [r2, #32]
 8000eee:	4b58      	ldr	r3, [pc, #352]	; (8001050 <HAL_RCC_OscConfig+0x4c4>)
 8000ef0:	6a1b      	ldr	r3, [r3, #32]
 8000ef2:	4a57      	ldr	r2, [pc, #348]	; (8001050 <HAL_RCC_OscConfig+0x4c4>)
 8000ef4:	f023 0304 	bic.w	r3, r3, #4
 8000ef8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d015      	beq.n	8000f2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f02:	f7ff fb6d 	bl	80005e0 <HAL_GetTick>
 8000f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f08:	e00a      	b.n	8000f20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f0a:	f7ff fb69 	bl	80005e0 <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e0b1      	b.n	8001084 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f20:	4b4b      	ldr	r3, [pc, #300]	; (8001050 <HAL_RCC_OscConfig+0x4c4>)
 8000f22:	6a1b      	ldr	r3, [r3, #32]
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d0ee      	beq.n	8000f0a <HAL_RCC_OscConfig+0x37e>
 8000f2c:	e014      	b.n	8000f58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f2e:	f7ff fb57 	bl	80005e0 <HAL_GetTick>
 8000f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f34:	e00a      	b.n	8000f4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f36:	f7ff fb53 	bl	80005e0 <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e09b      	b.n	8001084 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f4c:	4b40      	ldr	r3, [pc, #256]	; (8001050 <HAL_RCC_OscConfig+0x4c4>)
 8000f4e:	6a1b      	ldr	r3, [r3, #32]
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1ee      	bne.n	8000f36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f58:	7dfb      	ldrb	r3, [r7, #23]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d105      	bne.n	8000f6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f5e:	4b3c      	ldr	r3, [pc, #240]	; (8001050 <HAL_RCC_OscConfig+0x4c4>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	4a3b      	ldr	r2, [pc, #236]	; (8001050 <HAL_RCC_OscConfig+0x4c4>)
 8000f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f000 8087 	beq.w	8001082 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f74:	4b36      	ldr	r3, [pc, #216]	; (8001050 <HAL_RCC_OscConfig+0x4c4>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 030c 	and.w	r3, r3, #12
 8000f7c:	2b08      	cmp	r3, #8
 8000f7e:	d061      	beq.n	8001044 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69db      	ldr	r3, [r3, #28]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d146      	bne.n	8001016 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f88:	4b33      	ldr	r3, [pc, #204]	; (8001058 <HAL_RCC_OscConfig+0x4cc>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8e:	f7ff fb27 	bl	80005e0 <HAL_GetTick>
 8000f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f94:	e008      	b.n	8000fa8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f96:	f7ff fb23 	bl	80005e0 <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d901      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e06d      	b.n	8001084 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fa8:	4b29      	ldr	r3, [pc, #164]	; (8001050 <HAL_RCC_OscConfig+0x4c4>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1f0      	bne.n	8000f96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a1b      	ldr	r3, [r3, #32]
 8000fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fbc:	d108      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fbe:	4b24      	ldr	r3, [pc, #144]	; (8001050 <HAL_RCC_OscConfig+0x4c4>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	4921      	ldr	r1, [pc, #132]	; (8001050 <HAL_RCC_OscConfig+0x4c4>)
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fd0:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <HAL_RCC_OscConfig+0x4c4>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a19      	ldr	r1, [r3, #32]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe0:	430b      	orrs	r3, r1
 8000fe2:	491b      	ldr	r1, [pc, #108]	; (8001050 <HAL_RCC_OscConfig+0x4c4>)
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <HAL_RCC_OscConfig+0x4cc>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fee:	f7ff faf7 	bl	80005e0 <HAL_GetTick>
 8000ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ff4:	e008      	b.n	8001008 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ff6:	f7ff faf3 	bl	80005e0 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e03d      	b.n	8001084 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <HAL_RCC_OscConfig+0x4c4>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0f0      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x46a>
 8001014:	e035      	b.n	8001082 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <HAL_RCC_OscConfig+0x4cc>)
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101c:	f7ff fae0 	bl	80005e0 <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001024:	f7ff fadc 	bl	80005e0 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e026      	b.n	8001084 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_RCC_OscConfig+0x4c4>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1f0      	bne.n	8001024 <HAL_RCC_OscConfig+0x498>
 8001042:	e01e      	b.n	8001082 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	69db      	ldr	r3, [r3, #28]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d107      	bne.n	800105c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e019      	b.n	8001084 <HAL_RCC_OscConfig+0x4f8>
 8001050:	40021000 	.word	0x40021000
 8001054:	40007000 	.word	0x40007000
 8001058:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <HAL_RCC_OscConfig+0x500>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	429a      	cmp	r2, r3
 800106e:	d106      	bne.n	800107e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800107a:	429a      	cmp	r2, r3
 800107c:	d001      	beq.n	8001082 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e000      	b.n	8001084 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40021000 	.word	0x40021000

08001090 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e0d0      	b.n	8001246 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010a4:	4b6a      	ldr	r3, [pc, #424]	; (8001250 <HAL_RCC_ClockConfig+0x1c0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d910      	bls.n	80010d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010b2:	4b67      	ldr	r3, [pc, #412]	; (8001250 <HAL_RCC_ClockConfig+0x1c0>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f023 0207 	bic.w	r2, r3, #7
 80010ba:	4965      	ldr	r1, [pc, #404]	; (8001250 <HAL_RCC_ClockConfig+0x1c0>)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	4313      	orrs	r3, r2
 80010c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010c2:	4b63      	ldr	r3, [pc, #396]	; (8001250 <HAL_RCC_ClockConfig+0x1c0>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d001      	beq.n	80010d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e0b8      	b.n	8001246 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d020      	beq.n	8001122 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d005      	beq.n	80010f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010ec:	4b59      	ldr	r3, [pc, #356]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	4a58      	ldr	r2, [pc, #352]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 80010f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	2b00      	cmp	r3, #0
 8001102:	d005      	beq.n	8001110 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001104:	4b53      	ldr	r3, [pc, #332]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	4a52      	ldr	r2, [pc, #328]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 800110a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800110e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001110:	4b50      	ldr	r3, [pc, #320]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	494d      	ldr	r1, [pc, #308]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 800111e:	4313      	orrs	r3, r2
 8001120:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b00      	cmp	r3, #0
 800112c:	d040      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d107      	bne.n	8001146 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001136:	4b47      	ldr	r3, [pc, #284]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d115      	bne.n	800116e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e07f      	b.n	8001246 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b02      	cmp	r3, #2
 800114c:	d107      	bne.n	800115e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800114e:	4b41      	ldr	r3, [pc, #260]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d109      	bne.n	800116e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e073      	b.n	8001246 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800115e:	4b3d      	ldr	r3, [pc, #244]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e06b      	b.n	8001246 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800116e:	4b39      	ldr	r3, [pc, #228]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f023 0203 	bic.w	r2, r3, #3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	4936      	ldr	r1, [pc, #216]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 800117c:	4313      	orrs	r3, r2
 800117e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001180:	f7ff fa2e 	bl	80005e0 <HAL_GetTick>
 8001184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001186:	e00a      	b.n	800119e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001188:	f7ff fa2a 	bl	80005e0 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	f241 3288 	movw	r2, #5000	; 0x1388
 8001196:	4293      	cmp	r3, r2
 8001198:	d901      	bls.n	800119e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e053      	b.n	8001246 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800119e:	4b2d      	ldr	r3, [pc, #180]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 020c 	and.w	r2, r3, #12
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d1eb      	bne.n	8001188 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011b0:	4b27      	ldr	r3, [pc, #156]	; (8001250 <HAL_RCC_ClockConfig+0x1c0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0307 	and.w	r3, r3, #7
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d210      	bcs.n	80011e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011be:	4b24      	ldr	r3, [pc, #144]	; (8001250 <HAL_RCC_ClockConfig+0x1c0>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f023 0207 	bic.w	r2, r3, #7
 80011c6:	4922      	ldr	r1, [pc, #136]	; (8001250 <HAL_RCC_ClockConfig+0x1c0>)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ce:	4b20      	ldr	r3, [pc, #128]	; (8001250 <HAL_RCC_ClockConfig+0x1c0>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d001      	beq.n	80011e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e032      	b.n	8001246 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d008      	beq.n	80011fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	4916      	ldr	r1, [pc, #88]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	2b00      	cmp	r3, #0
 8001208:	d009      	beq.n	800121e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	490e      	ldr	r1, [pc, #56]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 800121a:	4313      	orrs	r3, r2
 800121c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800121e:	f000 f821 	bl	8001264 <HAL_RCC_GetSysClockFreq>
 8001222:	4602      	mov	r2, r0
 8001224:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	091b      	lsrs	r3, r3, #4
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	490a      	ldr	r1, [pc, #40]	; (8001258 <HAL_RCC_ClockConfig+0x1c8>)
 8001230:	5ccb      	ldrb	r3, [r1, r3]
 8001232:	fa22 f303 	lsr.w	r3, r2, r3
 8001236:	4a09      	ldr	r2, [pc, #36]	; (800125c <HAL_RCC_ClockConfig+0x1cc>)
 8001238:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <HAL_RCC_ClockConfig+0x1d0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f98c 	bl	800055c <HAL_InitTick>

  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40022000 	.word	0x40022000
 8001254:	40021000 	.word	0x40021000
 8001258:	08002a10 	.word	0x08002a10
 800125c:	20000000 	.word	0x20000000
 8001260:	20000004 	.word	0x20000004

08001264 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001264:	b490      	push	{r4, r7}
 8001266:	b08a      	sub	sp, #40	; 0x28
 8001268:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800126a:	4b29      	ldr	r3, [pc, #164]	; (8001310 <HAL_RCC_GetSysClockFreq+0xac>)
 800126c:	1d3c      	adds	r4, r7, #4
 800126e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001270:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001274:	f240 2301 	movw	r3, #513	; 0x201
 8001278:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
 8001282:	2300      	movs	r3, #0
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800128e:	4b21      	ldr	r3, [pc, #132]	; (8001314 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f003 030c 	and.w	r3, r3, #12
 800129a:	2b04      	cmp	r3, #4
 800129c:	d002      	beq.n	80012a4 <HAL_RCC_GetSysClockFreq+0x40>
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d003      	beq.n	80012aa <HAL_RCC_GetSysClockFreq+0x46>
 80012a2:	e02b      	b.n	80012fc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012a4:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <HAL_RCC_GetSysClockFreq+0xb4>)
 80012a6:	623b      	str	r3, [r7, #32]
      break;
 80012a8:	e02b      	b.n	8001302 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	0c9b      	lsrs	r3, r3, #18
 80012ae:	f003 030f 	and.w	r3, r3, #15
 80012b2:	3328      	adds	r3, #40	; 0x28
 80012b4:	443b      	add	r3, r7
 80012b6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80012ba:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d012      	beq.n	80012ec <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <HAL_RCC_GetSysClockFreq+0xb0>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	0c5b      	lsrs	r3, r3, #17
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	3328      	adds	r3, #40	; 0x28
 80012d2:	443b      	add	r3, r7
 80012d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80012d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	4a0e      	ldr	r2, [pc, #56]	; (8001318 <HAL_RCC_GetSysClockFreq+0xb4>)
 80012de:	fb03 f202 	mul.w	r2, r3, r2
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
 80012ea:	e004      	b.n	80012f6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	4a0b      	ldr	r2, [pc, #44]	; (800131c <HAL_RCC_GetSysClockFreq+0xb8>)
 80012f0:	fb02 f303 	mul.w	r3, r2, r3
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	623b      	str	r3, [r7, #32]
      break;
 80012fa:	e002      	b.n	8001302 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_RCC_GetSysClockFreq+0xb4>)
 80012fe:	623b      	str	r3, [r7, #32]
      break;
 8001300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001302:	6a3b      	ldr	r3, [r7, #32]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3728      	adds	r7, #40	; 0x28
 8001308:	46bd      	mov	sp, r7
 800130a:	bc90      	pop	{r4, r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	080029f8 	.word	0x080029f8
 8001314:	40021000 	.word	0x40021000
 8001318:	007a1200 	.word	0x007a1200
 800131c:	003d0900 	.word	0x003d0900

08001320 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001324:	4b02      	ldr	r3, [pc, #8]	; (8001330 <HAL_RCC_GetHCLKFreq+0x10>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	20000000 	.word	0x20000000

08001334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001338:	f7ff fff2 	bl	8001320 <HAL_RCC_GetHCLKFreq>
 800133c:	4602      	mov	r2, r0
 800133e:	4b05      	ldr	r3, [pc, #20]	; (8001354 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	0a1b      	lsrs	r3, r3, #8
 8001344:	f003 0307 	and.w	r3, r3, #7
 8001348:	4903      	ldr	r1, [pc, #12]	; (8001358 <HAL_RCC_GetPCLK1Freq+0x24>)
 800134a:	5ccb      	ldrb	r3, [r1, r3]
 800134c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001350:	4618      	mov	r0, r3
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40021000 	.word	0x40021000
 8001358:	08002a20 	.word	0x08002a20

0800135c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001360:	f7ff ffde 	bl	8001320 <HAL_RCC_GetHCLKFreq>
 8001364:	4602      	mov	r2, r0
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	0adb      	lsrs	r3, r3, #11
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	4903      	ldr	r1, [pc, #12]	; (8001380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001372:	5ccb      	ldrb	r3, [r1, r3]
 8001374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001378:	4618      	mov	r0, r3
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40021000 	.word	0x40021000
 8001380:	08002a20 	.word	0x08002a20

08001384 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <RCC_Delay+0x34>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <RCC_Delay+0x38>)
 8001392:	fba2 2303 	umull	r2, r3, r2, r3
 8001396:	0a5b      	lsrs	r3, r3, #9
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	fb02 f303 	mul.w	r3, r2, r3
 800139e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013a0:	bf00      	nop
  }
  while (Delay --);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	1e5a      	subs	r2, r3, #1
 80013a6:	60fa      	str	r2, [r7, #12]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1f9      	bne.n	80013a0 <RCC_Delay+0x1c>
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	20000000 	.word	0x20000000
 80013bc:	10624dd3 	.word	0x10624dd3

080013c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e03f      	b.n	8001452 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d106      	bne.n	80013ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff f80e 	bl	8000408 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2224      	movs	r2, #36	; 0x24
 80013f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	68da      	ldr	r2, [r3, #12]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001402:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 f829 	bl	800145c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	691a      	ldr	r2, [r3, #16]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001418:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	695a      	ldr	r2, [r3, #20]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001428:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68da      	ldr	r2, [r3, #12]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001438:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2220      	movs	r2, #32
 8001444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2220      	movs	r2, #32
 800144c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	4313      	orrs	r3, r2
 800148a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001496:	f023 030c 	bic.w	r3, r3, #12
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	68b9      	ldr	r1, [r7, #8]
 80014a0:	430b      	orrs	r3, r1
 80014a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	699a      	ldr	r2, [r3, #24]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a2c      	ldr	r2, [pc, #176]	; (8001570 <UART_SetConfig+0x114>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d103      	bne.n	80014cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80014c4:	f7ff ff4a 	bl	800135c <HAL_RCC_GetPCLK2Freq>
 80014c8:	60f8      	str	r0, [r7, #12]
 80014ca:	e002      	b.n	80014d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80014cc:	f7ff ff32 	bl	8001334 <HAL_RCC_GetPCLK1Freq>
 80014d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	009a      	lsls	r2, r3, #2
 80014dc:	441a      	add	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e8:	4a22      	ldr	r2, [pc, #136]	; (8001574 <UART_SetConfig+0x118>)
 80014ea:	fba2 2303 	umull	r2, r3, r2, r3
 80014ee:	095b      	lsrs	r3, r3, #5
 80014f0:	0119      	lsls	r1, r3, #4
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	009a      	lsls	r2, r3, #2
 80014fc:	441a      	add	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	fbb2 f2f3 	udiv	r2, r2, r3
 8001508:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <UART_SetConfig+0x118>)
 800150a:	fba3 0302 	umull	r0, r3, r3, r2
 800150e:	095b      	lsrs	r3, r3, #5
 8001510:	2064      	movs	r0, #100	; 0x64
 8001512:	fb00 f303 	mul.w	r3, r0, r3
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	011b      	lsls	r3, r3, #4
 800151a:	3332      	adds	r3, #50	; 0x32
 800151c:	4a15      	ldr	r2, [pc, #84]	; (8001574 <UART_SetConfig+0x118>)
 800151e:	fba2 2303 	umull	r2, r3, r2, r3
 8001522:	095b      	lsrs	r3, r3, #5
 8001524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001528:	4419      	add	r1, r3
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	009a      	lsls	r2, r3, #2
 8001534:	441a      	add	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <UART_SetConfig+0x118>)
 8001542:	fba3 0302 	umull	r0, r3, r3, r2
 8001546:	095b      	lsrs	r3, r3, #5
 8001548:	2064      	movs	r0, #100	; 0x64
 800154a:	fb00 f303 	mul.w	r3, r0, r3
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	3332      	adds	r3, #50	; 0x32
 8001554:	4a07      	ldr	r2, [pc, #28]	; (8001574 <UART_SetConfig+0x118>)
 8001556:	fba2 2303 	umull	r2, r3, r2, r3
 800155a:	095b      	lsrs	r3, r3, #5
 800155c:	f003 020f 	and.w	r2, r3, #15
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	440a      	add	r2, r1
 8001566:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001568:	bf00      	nop
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40013800 	.word	0x40013800
 8001574:	51eb851f 	.word	0x51eb851f

08001578 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800158a:	2b84      	cmp	r3, #132	; 0x84
 800158c:	d005      	beq.n	800159a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800158e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4413      	add	r3, r2
 8001596:	3303      	adds	r3, #3
 8001598:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800159a:	68fb      	ldr	r3, [r7, #12]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr

080015a6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80015aa:	f000 fad1 	bl	8001b50 <vTaskStartScheduler>
  
  return osOK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80015b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b6:	b089      	sub	sp, #36	; 0x24
 80015b8:	af04      	add	r7, sp, #16
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d020      	beq.n	8001608 <osThreadCreate+0x54>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d01c      	beq.n	8001608 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685c      	ldr	r4, [r3, #4]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681d      	ldr	r5, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691e      	ldr	r6, [r3, #16]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ffc9 	bl	8001578 <makeFreeRtosPriority>
 80015e6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80015f0:	9202      	str	r2, [sp, #8]
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	9100      	str	r1, [sp, #0]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	4632      	mov	r2, r6
 80015fa:	4629      	mov	r1, r5
 80015fc:	4620      	mov	r0, r4
 80015fe:	f000 f8e8 	bl	80017d2 <xTaskCreateStatic>
 8001602:	4603      	mov	r3, r0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	e01c      	b.n	8001642 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685c      	ldr	r4, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001614:	b29e      	uxth	r6, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ffab 	bl	8001578 <makeFreeRtosPriority>
 8001622:	4602      	mov	r2, r0
 8001624:	f107 030c 	add.w	r3, r7, #12
 8001628:	9301      	str	r3, [sp, #4]
 800162a:	9200      	str	r2, [sp, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	4632      	mov	r2, r6
 8001630:	4629      	mov	r1, r5
 8001632:	4620      	mov	r0, r4
 8001634:	f000 f929 	bl	800188a <xTaskCreate>
 8001638:	4603      	mov	r3, r0
 800163a:	2b01      	cmp	r3, #1
 800163c:	d001      	beq.n	8001642 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800163e:	2300      	movs	r3, #0
 8001640:	e000      	b.n	8001644 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001642:	68fb      	ldr	r3, [r7, #12]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800164c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <osDelay+0x16>
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	e000      	b.n	8001664 <osDelay+0x18>
 8001662:	2301      	movs	r3, #1
 8001664:	4618      	mov	r0, r3
 8001666:	f000 fa3f 	bl	8001ae8 <vTaskDelay>
  
  return osOK;
 800166a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800166c:	4618      	mov	r0, r3
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f103 0208 	add.w	r2, r3, #8
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f04f 32ff 	mov.w	r2, #4294967295
 800168c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f103 0208 	add.w	r2, r3, #8
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f103 0208 	add.w	r2, r3, #8
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr

080016b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80016ca:	b480      	push	{r7}
 80016cc:	b085      	sub	sp, #20
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	1c5a      	adds	r2, r3, #1
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	601a      	str	r2, [r3, #0]
}
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001726:	d103      	bne.n	8001730 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	e00c      	b.n	800174a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3308      	adds	r3, #8
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	e002      	b.n	800173e <vListInsert+0x2e>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68ba      	ldr	r2, [r7, #8]
 8001746:	429a      	cmp	r2, r3
 8001748:	d2f6      	bcs.n	8001738 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	1c5a      	adds	r2, r3, #1
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	601a      	str	r2, [r3, #0]
}
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6892      	ldr	r2, [r2, #8]
 8001796:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6852      	ldr	r2, [r2, #4]
 80017a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d103      	bne.n	80017b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	1e5a      	subs	r2, r3, #1
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr

080017d2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b08e      	sub	sp, #56	; 0x38
 80017d6:	af04      	add	r7, sp, #16
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
 80017de:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80017e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10a      	bne.n	80017fc <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80017e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ea:	f383 8811 	msr	BASEPRI, r3
 80017ee:	f3bf 8f6f 	isb	sy
 80017f2:	f3bf 8f4f 	dsb	sy
 80017f6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80017f8:	bf00      	nop
 80017fa:	e7fe      	b.n	80017fa <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80017fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10a      	bne.n	8001818 <xTaskCreateStatic+0x46>
	__asm volatile
 8001802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001806:	f383 8811 	msr	BASEPRI, r3
 800180a:	f3bf 8f6f 	isb	sy
 800180e:	f3bf 8f4f 	dsb	sy
 8001812:	61fb      	str	r3, [r7, #28]
}
 8001814:	bf00      	nop
 8001816:	e7fe      	b.n	8001816 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001818:	2354      	movs	r3, #84	; 0x54
 800181a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	2b54      	cmp	r3, #84	; 0x54
 8001820:	d00a      	beq.n	8001838 <xTaskCreateStatic+0x66>
	__asm volatile
 8001822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001826:	f383 8811 	msr	BASEPRI, r3
 800182a:	f3bf 8f6f 	isb	sy
 800182e:	f3bf 8f4f 	dsb	sy
 8001832:	61bb      	str	r3, [r7, #24]
}
 8001834:	bf00      	nop
 8001836:	e7fe      	b.n	8001836 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800183a:	2b00      	cmp	r3, #0
 800183c:	d01e      	beq.n	800187c <xTaskCreateStatic+0xaa>
 800183e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001840:	2b00      	cmp	r3, #0
 8001842:	d01b      	beq.n	800187c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800184c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	2202      	movs	r2, #2
 8001852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001856:	2300      	movs	r3, #0
 8001858:	9303      	str	r3, [sp, #12]
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	9302      	str	r3, [sp, #8]
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	9301      	str	r3, [sp, #4]
 8001864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f000 f850 	bl	8001914 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001874:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001876:	f000 f8cd 	bl	8001a14 <prvAddNewTaskToReadyList>
 800187a:	e001      	b.n	8001880 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001880:	697b      	ldr	r3, [r7, #20]
	}
 8001882:	4618      	mov	r0, r3
 8001884:	3728      	adds	r7, #40	; 0x28
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800188a:	b580      	push	{r7, lr}
 800188c:	b08c      	sub	sp, #48	; 0x30
 800188e:	af04      	add	r7, sp, #16
 8001890:	60f8      	str	r0, [r7, #12]
 8001892:	60b9      	str	r1, [r7, #8]
 8001894:	603b      	str	r3, [r7, #0]
 8001896:	4613      	mov	r3, r2
 8001898:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800189a:	88fb      	ldrh	r3, [r7, #6]
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 fe86 	bl	80025b0 <pvPortMalloc>
 80018a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00e      	beq.n	80018ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80018ac:	2054      	movs	r0, #84	; 0x54
 80018ae:	f000 fe7f 	bl	80025b0 <pvPortMalloc>
 80018b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	631a      	str	r2, [r3, #48]	; 0x30
 80018c0:	e005      	b.n	80018ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80018c2:	6978      	ldr	r0, [r7, #20]
 80018c4:	f000 ff38 	bl	8002738 <vPortFree>
 80018c8:	e001      	b.n	80018ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d017      	beq.n	8001904 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80018dc:	88fa      	ldrh	r2, [r7, #6]
 80018de:	2300      	movs	r3, #0
 80018e0:	9303      	str	r3, [sp, #12]
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	9302      	str	r3, [sp, #8]
 80018e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e8:	9301      	str	r3, [sp, #4]
 80018ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	68b9      	ldr	r1, [r7, #8]
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 f80e 	bl	8001914 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80018f8:	69f8      	ldr	r0, [r7, #28]
 80018fa:	f000 f88b 	bl	8001a14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80018fe:	2301      	movs	r3, #1
 8001900:	61bb      	str	r3, [r7, #24]
 8001902:	e002      	b.n	800190a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001904:	f04f 33ff 	mov.w	r3, #4294967295
 8001908:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800190a:	69bb      	ldr	r3, [r7, #24]
	}
 800190c:	4618      	mov	r0, r3
 800190e:	3720      	adds	r7, #32
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
 8001920:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800192c:	3b01      	subs	r3, #1
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	f023 0307 	bic.w	r3, r3, #7
 800193a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00a      	beq.n	800195c <prvInitialiseNewTask+0x48>
	__asm volatile
 8001946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800194a:	f383 8811 	msr	BASEPRI, r3
 800194e:	f3bf 8f6f 	isb	sy
 8001952:	f3bf 8f4f 	dsb	sy
 8001956:	617b      	str	r3, [r7, #20]
}
 8001958:	bf00      	nop
 800195a:	e7fe      	b.n	800195a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800195c:	2300      	movs	r3, #0
 800195e:	61fb      	str	r3, [r7, #28]
 8001960:	e012      	b.n	8001988 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	4413      	add	r3, r2
 8001968:	7819      	ldrb	r1, [r3, #0]
 800196a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	4413      	add	r3, r2
 8001970:	3334      	adds	r3, #52	; 0x34
 8001972:	460a      	mov	r2, r1
 8001974:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	4413      	add	r3, r2
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d006      	beq.n	8001990 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3301      	adds	r3, #1
 8001986:	61fb      	str	r3, [r7, #28]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	2b0f      	cmp	r3, #15
 800198c:	d9e9      	bls.n	8001962 <prvInitialiseNewTask+0x4e>
 800198e:	e000      	b.n	8001992 <prvInitialiseNewTask+0x7e>
		{
			break;
 8001990:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800199a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800199c:	2b06      	cmp	r3, #6
 800199e:	d901      	bls.n	80019a4 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80019a0:	2306      	movs	r3, #6
 80019a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80019a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80019aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019ae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80019b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b2:	2200      	movs	r2, #0
 80019b4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80019b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b8:	3304      	adds	r3, #4
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fe79 	bl	80016b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80019c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c2:	3318      	adds	r3, #24
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fe74 	bl	80016b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80019ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d2:	f1c3 0207 	rsb	r2, r3, #7
 80019d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80019da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80019e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e2:	2200      	movs	r2, #0
 80019e4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80019e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	68f9      	ldr	r1, [r7, #12]
 80019f2:	69b8      	ldr	r0, [r7, #24]
 80019f4:	f000 fc2c 	bl	8002250 <pxPortInitialiseStack>
 80019f8:	4602      	mov	r2, r0
 80019fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019fc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80019fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d002      	beq.n	8001a0a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001a0a:	bf00      	nop
 8001a0c:	3720      	adds	r7, #32
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001a1c:	f000 fd06 	bl	800242c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001a20:	4b2a      	ldr	r3, [pc, #168]	; (8001acc <prvAddNewTaskToReadyList+0xb8>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	3301      	adds	r3, #1
 8001a26:	4a29      	ldr	r2, [pc, #164]	; (8001acc <prvAddNewTaskToReadyList+0xb8>)
 8001a28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001a2a:	4b29      	ldr	r3, [pc, #164]	; (8001ad0 <prvAddNewTaskToReadyList+0xbc>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d109      	bne.n	8001a46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001a32:	4a27      	ldr	r2, [pc, #156]	; (8001ad0 <prvAddNewTaskToReadyList+0xbc>)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001a38:	4b24      	ldr	r3, [pc, #144]	; (8001acc <prvAddNewTaskToReadyList+0xb8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d110      	bne.n	8001a62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001a40:	f000 fac0 	bl	8001fc4 <prvInitialiseTaskLists>
 8001a44:	e00d      	b.n	8001a62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001a46:	4b23      	ldr	r3, [pc, #140]	; (8001ad4 <prvAddNewTaskToReadyList+0xc0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d109      	bne.n	8001a62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001a4e:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <prvAddNewTaskToReadyList+0xbc>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d802      	bhi.n	8001a62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001a5c:	4a1c      	ldr	r2, [pc, #112]	; (8001ad0 <prvAddNewTaskToReadyList+0xbc>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001a62:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <prvAddNewTaskToReadyList+0xc4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	3301      	adds	r3, #1
 8001a68:	4a1b      	ldr	r2, [pc, #108]	; (8001ad8 <prvAddNewTaskToReadyList+0xc4>)
 8001a6a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a70:	2201      	movs	r2, #1
 8001a72:	409a      	lsls	r2, r3
 8001a74:	4b19      	ldr	r3, [pc, #100]	; (8001adc <prvAddNewTaskToReadyList+0xc8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	4a18      	ldr	r2, [pc, #96]	; (8001adc <prvAddNewTaskToReadyList+0xc8>)
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a82:	4613      	mov	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4a15      	ldr	r2, [pc, #84]	; (8001ae0 <prvAddNewTaskToReadyList+0xcc>)
 8001a8c:	441a      	add	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3304      	adds	r3, #4
 8001a92:	4619      	mov	r1, r3
 8001a94:	4610      	mov	r0, r2
 8001a96:	f7ff fe18 	bl	80016ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001a9a:	f000 fcf7 	bl	800248c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001a9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <prvAddNewTaskToReadyList+0xc0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00e      	beq.n	8001ac4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <prvAddNewTaskToReadyList+0xbc>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d207      	bcs.n	8001ac4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <prvAddNewTaskToReadyList+0xd0>)
 8001ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	f3bf 8f4f 	dsb	sy
 8001ac0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	200003cc 	.word	0x200003cc
 8001ad0:	200002cc 	.word	0x200002cc
 8001ad4:	200003d8 	.word	0x200003d8
 8001ad8:	200003e8 	.word	0x200003e8
 8001adc:	200003d4 	.word	0x200003d4
 8001ae0:	200002d0 	.word	0x200002d0
 8001ae4:	e000ed04 	.word	0xe000ed04

08001ae8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d017      	beq.n	8001b2a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001afa:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <vTaskDelay+0x60>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00a      	beq.n	8001b18 <vTaskDelay+0x30>
	__asm volatile
 8001b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b06:	f383 8811 	msr	BASEPRI, r3
 8001b0a:	f3bf 8f6f 	isb	sy
 8001b0e:	f3bf 8f4f 	dsb	sy
 8001b12:	60bb      	str	r3, [r7, #8]
}
 8001b14:	bf00      	nop
 8001b16:	e7fe      	b.n	8001b16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001b18:	f000 f87a 	bl	8001c10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 fb30 	bl	8002184 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001b24:	f000 f882 	bl	8001c2c <xTaskResumeAll>
 8001b28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d107      	bne.n	8001b40 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <vTaskDelay+0x64>)
 8001b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	f3bf 8f4f 	dsb	sy
 8001b3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001b40:	bf00      	nop
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	200003f4 	.word	0x200003f4
 8001b4c:	e000ed04 	.word	0xe000ed04

08001b50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	; 0x28
 8001b54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001b5e:	463a      	mov	r2, r7
 8001b60:	1d39      	adds	r1, r7, #4
 8001b62:	f107 0308 	add.w	r3, r7, #8
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe faf2 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001b6c:	6839      	ldr	r1, [r7, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68ba      	ldr	r2, [r7, #8]
 8001b72:	9202      	str	r2, [sp, #8]
 8001b74:	9301      	str	r3, [sp, #4]
 8001b76:	2300      	movs	r3, #0
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	460a      	mov	r2, r1
 8001b7e:	491e      	ldr	r1, [pc, #120]	; (8001bf8 <vTaskStartScheduler+0xa8>)
 8001b80:	481e      	ldr	r0, [pc, #120]	; (8001bfc <vTaskStartScheduler+0xac>)
 8001b82:	f7ff fe26 	bl	80017d2 <xTaskCreateStatic>
 8001b86:	4603      	mov	r3, r0
 8001b88:	4a1d      	ldr	r2, [pc, #116]	; (8001c00 <vTaskStartScheduler+0xb0>)
 8001b8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001b8c:	4b1c      	ldr	r3, [pc, #112]	; (8001c00 <vTaskStartScheduler+0xb0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d002      	beq.n	8001b9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001b94:	2301      	movs	r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	e001      	b.n	8001b9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d116      	bne.n	8001bd2 <vTaskStartScheduler+0x82>
	__asm volatile
 8001ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ba8:	f383 8811 	msr	BASEPRI, r3
 8001bac:	f3bf 8f6f 	isb	sy
 8001bb0:	f3bf 8f4f 	dsb	sy
 8001bb4:	613b      	str	r3, [r7, #16]
}
 8001bb6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <vTaskStartScheduler+0xb4>)
 8001bba:	f04f 32ff 	mov.w	r2, #4294967295
 8001bbe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <vTaskStartScheduler+0xb8>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001bc6:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <vTaskStartScheduler+0xbc>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001bcc:	f000 fbbc 	bl	8002348 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001bd0:	e00e      	b.n	8001bf0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd8:	d10a      	bne.n	8001bf0 <vTaskStartScheduler+0xa0>
	__asm volatile
 8001bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bde:	f383 8811 	msr	BASEPRI, r3
 8001be2:	f3bf 8f6f 	isb	sy
 8001be6:	f3bf 8f4f 	dsb	sy
 8001bea:	60fb      	str	r3, [r7, #12]
}
 8001bec:	bf00      	nop
 8001bee:	e7fe      	b.n	8001bee <vTaskStartScheduler+0x9e>
}
 8001bf0:	bf00      	nop
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	08002a08 	.word	0x08002a08
 8001bfc:	08001f95 	.word	0x08001f95
 8001c00:	200003f0 	.word	0x200003f0
 8001c04:	200003ec 	.word	0x200003ec
 8001c08:	200003d8 	.word	0x200003d8
 8001c0c:	200003d0 	.word	0x200003d0

08001c10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001c14:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <vTaskSuspendAll+0x18>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	4a03      	ldr	r2, [pc, #12]	; (8001c28 <vTaskSuspendAll+0x18>)
 8001c1c:	6013      	str	r3, [r2, #0]
}
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	200003f4 	.word	0x200003f4

08001c2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001c3a:	4b41      	ldr	r3, [pc, #260]	; (8001d40 <xTaskResumeAll+0x114>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10a      	bne.n	8001c58 <xTaskResumeAll+0x2c>
	__asm volatile
 8001c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c46:	f383 8811 	msr	BASEPRI, r3
 8001c4a:	f3bf 8f6f 	isb	sy
 8001c4e:	f3bf 8f4f 	dsb	sy
 8001c52:	603b      	str	r3, [r7, #0]
}
 8001c54:	bf00      	nop
 8001c56:	e7fe      	b.n	8001c56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001c58:	f000 fbe8 	bl	800242c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001c5c:	4b38      	ldr	r3, [pc, #224]	; (8001d40 <xTaskResumeAll+0x114>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	3b01      	subs	r3, #1
 8001c62:	4a37      	ldr	r2, [pc, #220]	; (8001d40 <xTaskResumeAll+0x114>)
 8001c64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c66:	4b36      	ldr	r3, [pc, #216]	; (8001d40 <xTaskResumeAll+0x114>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d161      	bne.n	8001d32 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001c6e:	4b35      	ldr	r3, [pc, #212]	; (8001d44 <xTaskResumeAll+0x118>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d05d      	beq.n	8001d32 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001c76:	e02e      	b.n	8001cd6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001c78:	4b33      	ldr	r3, [pc, #204]	; (8001d48 <xTaskResumeAll+0x11c>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	3318      	adds	r3, #24
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fd7b 	bl	8001780 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fd76 	bl	8001780 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c98:	2201      	movs	r2, #1
 8001c9a:	409a      	lsls	r2, r3
 8001c9c:	4b2b      	ldr	r3, [pc, #172]	; (8001d4c <xTaskResumeAll+0x120>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	4a2a      	ldr	r2, [pc, #168]	; (8001d4c <xTaskResumeAll+0x120>)
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001caa:	4613      	mov	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4a27      	ldr	r2, [pc, #156]	; (8001d50 <xTaskResumeAll+0x124>)
 8001cb4:	441a      	add	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	3304      	adds	r3, #4
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	f7ff fd04 	bl	80016ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cc6:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <xTaskResumeAll+0x128>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d302      	bcc.n	8001cd6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8001cd0:	4b21      	ldr	r3, [pc, #132]	; (8001d58 <xTaskResumeAll+0x12c>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001cd6:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <xTaskResumeAll+0x11c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1cc      	bne.n	8001c78 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001ce4:	f000 fa0c 	bl	8002100 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001ce8:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <xTaskResumeAll+0x130>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d010      	beq.n	8001d16 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001cf4:	f000 f836 	bl	8001d64 <xTaskIncrementTick>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d002      	beq.n	8001d04 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8001cfe:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <xTaskResumeAll+0x12c>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1f1      	bne.n	8001cf4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <xTaskResumeAll+0x130>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <xTaskResumeAll+0x12c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d009      	beq.n	8001d32 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001d22:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <xTaskResumeAll+0x134>)
 8001d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	f3bf 8f4f 	dsb	sy
 8001d2e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001d32:	f000 fbab 	bl	800248c <vPortExitCritical>

	return xAlreadyYielded;
 8001d36:	68bb      	ldr	r3, [r7, #8]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	200003f4 	.word	0x200003f4
 8001d44:	200003cc 	.word	0x200003cc
 8001d48:	2000038c 	.word	0x2000038c
 8001d4c:	200003d4 	.word	0x200003d4
 8001d50:	200002d0 	.word	0x200002d0
 8001d54:	200002cc 	.word	0x200002cc
 8001d58:	200003e0 	.word	0x200003e0
 8001d5c:	200003dc 	.word	0x200003dc
 8001d60:	e000ed04 	.word	0xe000ed04

08001d64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d6e:	4b51      	ldr	r3, [pc, #324]	; (8001eb4 <xTaskIncrementTick+0x150>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f040 808d 	bne.w	8001e92 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001d78:	4b4f      	ldr	r3, [pc, #316]	; (8001eb8 <xTaskIncrementTick+0x154>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001d80:	4a4d      	ldr	r2, [pc, #308]	; (8001eb8 <xTaskIncrementTick+0x154>)
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d120      	bne.n	8001dce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001d8c:	4b4b      	ldr	r3, [pc, #300]	; (8001ebc <xTaskIncrementTick+0x158>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00a      	beq.n	8001dac <xTaskIncrementTick+0x48>
	__asm volatile
 8001d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d9a:	f383 8811 	msr	BASEPRI, r3
 8001d9e:	f3bf 8f6f 	isb	sy
 8001da2:	f3bf 8f4f 	dsb	sy
 8001da6:	603b      	str	r3, [r7, #0]
}
 8001da8:	bf00      	nop
 8001daa:	e7fe      	b.n	8001daa <xTaskIncrementTick+0x46>
 8001dac:	4b43      	ldr	r3, [pc, #268]	; (8001ebc <xTaskIncrementTick+0x158>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b43      	ldr	r3, [pc, #268]	; (8001ec0 <xTaskIncrementTick+0x15c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a41      	ldr	r2, [pc, #260]	; (8001ebc <xTaskIncrementTick+0x158>)
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	4a41      	ldr	r2, [pc, #260]	; (8001ec0 <xTaskIncrementTick+0x15c>)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	4b40      	ldr	r3, [pc, #256]	; (8001ec4 <xTaskIncrementTick+0x160>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	4a3f      	ldr	r2, [pc, #252]	; (8001ec4 <xTaskIncrementTick+0x160>)
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	f000 f999 	bl	8002100 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001dce:	4b3e      	ldr	r3, [pc, #248]	; (8001ec8 <xTaskIncrementTick+0x164>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d34d      	bcc.n	8001e74 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001dd8:	4b38      	ldr	r3, [pc, #224]	; (8001ebc <xTaskIncrementTick+0x158>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <xTaskIncrementTick+0x82>
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <xTaskIncrementTick+0x84>
 8001de6:	2300      	movs	r3, #0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d004      	beq.n	8001df6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001dec:	4b36      	ldr	r3, [pc, #216]	; (8001ec8 <xTaskIncrementTick+0x164>)
 8001dee:	f04f 32ff 	mov.w	r2, #4294967295
 8001df2:	601a      	str	r2, [r3, #0]
					break;
 8001df4:	e03e      	b.n	8001e74 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001df6:	4b31      	ldr	r3, [pc, #196]	; (8001ebc <xTaskIncrementTick+0x158>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d203      	bcs.n	8001e16 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001e0e:	4a2e      	ldr	r2, [pc, #184]	; (8001ec8 <xTaskIncrementTick+0x164>)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6013      	str	r3, [r2, #0]
						break;
 8001e14:	e02e      	b.n	8001e74 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fcb0 	bl	8001780 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d004      	beq.n	8001e32 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	3318      	adds	r3, #24
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fca7 	bl	8001780 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e36:	2201      	movs	r2, #1
 8001e38:	409a      	lsls	r2, r3
 8001e3a:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <xTaskIncrementTick+0x168>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	4a22      	ldr	r2, [pc, #136]	; (8001ecc <xTaskIncrementTick+0x168>)
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e48:	4613      	mov	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4a1f      	ldr	r2, [pc, #124]	; (8001ed0 <xTaskIncrementTick+0x16c>)
 8001e52:	441a      	add	r2, r3
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	3304      	adds	r3, #4
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	f7ff fc35 	bl	80016ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e64:	4b1b      	ldr	r3, [pc, #108]	; (8001ed4 <xTaskIncrementTick+0x170>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d3b4      	bcc.n	8001dd8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e72:	e7b1      	b.n	8001dd8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001e74:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <xTaskIncrementTick+0x170>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e7a:	4915      	ldr	r1, [pc, #84]	; (8001ed0 <xTaskIncrementTick+0x16c>)
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d907      	bls.n	8001e9c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	e004      	b.n	8001e9c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001e92:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <xTaskIncrementTick+0x174>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	3301      	adds	r3, #1
 8001e98:	4a0f      	ldr	r2, [pc, #60]	; (8001ed8 <xTaskIncrementTick+0x174>)
 8001e9a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001e9c:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <xTaskIncrementTick+0x178>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001ea8:	697b      	ldr	r3, [r7, #20]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	200003f4 	.word	0x200003f4
 8001eb8:	200003d0 	.word	0x200003d0
 8001ebc:	20000384 	.word	0x20000384
 8001ec0:	20000388 	.word	0x20000388
 8001ec4:	200003e4 	.word	0x200003e4
 8001ec8:	200003ec 	.word	0x200003ec
 8001ecc:	200003d4 	.word	0x200003d4
 8001ed0:	200002d0 	.word	0x200002d0
 8001ed4:	200002cc 	.word	0x200002cc
 8001ed8:	200003dc 	.word	0x200003dc
 8001edc:	200003e0 	.word	0x200003e0

08001ee0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b087      	sub	sp, #28
 8001ee4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001ee6:	4b26      	ldr	r3, [pc, #152]	; (8001f80 <vTaskSwitchContext+0xa0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001eee:	4b25      	ldr	r3, [pc, #148]	; (8001f84 <vTaskSwitchContext+0xa4>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001ef4:	e03f      	b.n	8001f76 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8001ef6:	4b23      	ldr	r3, [pc, #140]	; (8001f84 <vTaskSwitchContext+0xa4>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001efc:	4b22      	ldr	r3, [pc, #136]	; (8001f88 <vTaskSwitchContext+0xa8>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	fab3 f383 	clz	r3, r3
 8001f08:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001f0a:	7afb      	ldrb	r3, [r7, #11]
 8001f0c:	f1c3 031f 	rsb	r3, r3, #31
 8001f10:	617b      	str	r3, [r7, #20]
 8001f12:	491e      	ldr	r1, [pc, #120]	; (8001f8c <vTaskSwitchContext+0xac>)
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	440b      	add	r3, r1
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10a      	bne.n	8001f3c <vTaskSwitchContext+0x5c>
	__asm volatile
 8001f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f2a:	f383 8811 	msr	BASEPRI, r3
 8001f2e:	f3bf 8f6f 	isb	sy
 8001f32:	f3bf 8f4f 	dsb	sy
 8001f36:	607b      	str	r3, [r7, #4]
}
 8001f38:	bf00      	nop
 8001f3a:	e7fe      	b.n	8001f3a <vTaskSwitchContext+0x5a>
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4a11      	ldr	r2, [pc, #68]	; (8001f8c <vTaskSwitchContext+0xac>)
 8001f48:	4413      	add	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	3308      	adds	r3, #8
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d104      	bne.n	8001f6c <vTaskSwitchContext+0x8c>
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	605a      	str	r2, [r3, #4]
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	4a07      	ldr	r2, [pc, #28]	; (8001f90 <vTaskSwitchContext+0xb0>)
 8001f74:	6013      	str	r3, [r2, #0]
}
 8001f76:	bf00      	nop
 8001f78:	371c      	adds	r7, #28
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr
 8001f80:	200003f4 	.word	0x200003f4
 8001f84:	200003e0 	.word	0x200003e0
 8001f88:	200003d4 	.word	0x200003d4
 8001f8c:	200002d0 	.word	0x200002d0
 8001f90:	200002cc 	.word	0x200002cc

08001f94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001f9c:	f000 f852 	bl	8002044 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <prvIdleTask+0x28>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d9f9      	bls.n	8001f9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <prvIdleTask+0x2c>)
 8001faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	f3bf 8f4f 	dsb	sy
 8001fb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001fb8:	e7f0      	b.n	8001f9c <prvIdleTask+0x8>
 8001fba:	bf00      	nop
 8001fbc:	200002d0 	.word	0x200002d0
 8001fc0:	e000ed04 	.word	0xe000ed04

08001fc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001fca:	2300      	movs	r3, #0
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	e00c      	b.n	8001fea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4a12      	ldr	r2, [pc, #72]	; (8002024 <prvInitialiseTaskLists+0x60>)
 8001fdc:	4413      	add	r3, r2
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff fb48 	bl	8001674 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	607b      	str	r3, [r7, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b06      	cmp	r3, #6
 8001fee:	d9ef      	bls.n	8001fd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001ff0:	480d      	ldr	r0, [pc, #52]	; (8002028 <prvInitialiseTaskLists+0x64>)
 8001ff2:	f7ff fb3f 	bl	8001674 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001ff6:	480d      	ldr	r0, [pc, #52]	; (800202c <prvInitialiseTaskLists+0x68>)
 8001ff8:	f7ff fb3c 	bl	8001674 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001ffc:	480c      	ldr	r0, [pc, #48]	; (8002030 <prvInitialiseTaskLists+0x6c>)
 8001ffe:	f7ff fb39 	bl	8001674 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002002:	480c      	ldr	r0, [pc, #48]	; (8002034 <prvInitialiseTaskLists+0x70>)
 8002004:	f7ff fb36 	bl	8001674 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002008:	480b      	ldr	r0, [pc, #44]	; (8002038 <prvInitialiseTaskLists+0x74>)
 800200a:	f7ff fb33 	bl	8001674 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800200e:	4b0b      	ldr	r3, [pc, #44]	; (800203c <prvInitialiseTaskLists+0x78>)
 8002010:	4a05      	ldr	r2, [pc, #20]	; (8002028 <prvInitialiseTaskLists+0x64>)
 8002012:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002014:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <prvInitialiseTaskLists+0x7c>)
 8002016:	4a05      	ldr	r2, [pc, #20]	; (800202c <prvInitialiseTaskLists+0x68>)
 8002018:	601a      	str	r2, [r3, #0]
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	200002d0 	.word	0x200002d0
 8002028:	2000035c 	.word	0x2000035c
 800202c:	20000370 	.word	0x20000370
 8002030:	2000038c 	.word	0x2000038c
 8002034:	200003a0 	.word	0x200003a0
 8002038:	200003b8 	.word	0x200003b8
 800203c:	20000384 	.word	0x20000384
 8002040:	20000388 	.word	0x20000388

08002044 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800204a:	e019      	b.n	8002080 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800204c:	f000 f9ee 	bl	800242c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002050:	4b10      	ldr	r3, [pc, #64]	; (8002094 <prvCheckTasksWaitingTermination+0x50>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3304      	adds	r3, #4
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fb8f 	bl	8001780 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002062:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <prvCheckTasksWaitingTermination+0x54>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	3b01      	subs	r3, #1
 8002068:	4a0b      	ldr	r2, [pc, #44]	; (8002098 <prvCheckTasksWaitingTermination+0x54>)
 800206a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <prvCheckTasksWaitingTermination+0x58>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	3b01      	subs	r3, #1
 8002072:	4a0a      	ldr	r2, [pc, #40]	; (800209c <prvCheckTasksWaitingTermination+0x58>)
 8002074:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002076:	f000 fa09 	bl	800248c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f810 	bl	80020a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002080:	4b06      	ldr	r3, [pc, #24]	; (800209c <prvCheckTasksWaitingTermination+0x58>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1e1      	bne.n	800204c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002088:	bf00      	nop
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200003a0 	.word	0x200003a0
 8002098:	200003cc 	.word	0x200003cc
 800209c:	200003b4 	.word	0x200003b4

080020a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d108      	bne.n	80020c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 fb3e 	bl	8002738 <vPortFree>
				vPortFree( pxTCB );
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 fb3b 	bl	8002738 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80020c2:	e018      	b.n	80020f6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d103      	bne.n	80020d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 fb32 	bl	8002738 <vPortFree>
	}
 80020d4:	e00f      	b.n	80020f6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d00a      	beq.n	80020f6 <prvDeleteTCB+0x56>
	__asm volatile
 80020e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020e4:	f383 8811 	msr	BASEPRI, r3
 80020e8:	f3bf 8f6f 	isb	sy
 80020ec:	f3bf 8f4f 	dsb	sy
 80020f0:	60fb      	str	r3, [r7, #12]
}
 80020f2:	bf00      	nop
 80020f4:	e7fe      	b.n	80020f4 <prvDeleteTCB+0x54>
	}
 80020f6:	bf00      	nop
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002106:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <prvResetNextTaskUnblockTime+0x40>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <prvResetNextTaskUnblockTime+0x14>
 8002110:	2301      	movs	r3, #1
 8002112:	e000      	b.n	8002116 <prvResetNextTaskUnblockTime+0x16>
 8002114:	2300      	movs	r3, #0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d004      	beq.n	8002124 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <prvResetNextTaskUnblockTime+0x44>)
 800211c:	f04f 32ff 	mov.w	r2, #4294967295
 8002120:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002122:	e008      	b.n	8002136 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <prvResetNextTaskUnblockTime+0x40>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	4a04      	ldr	r2, [pc, #16]	; (8002144 <prvResetNextTaskUnblockTime+0x44>)
 8002134:	6013      	str	r3, [r2, #0]
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	20000384 	.word	0x20000384
 8002144:	200003ec 	.word	0x200003ec

08002148 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800214e:	4b0b      	ldr	r3, [pc, #44]	; (800217c <xTaskGetSchedulerState+0x34>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d102      	bne.n	800215c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002156:	2301      	movs	r3, #1
 8002158:	607b      	str	r3, [r7, #4]
 800215a:	e008      	b.n	800216e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800215c:	4b08      	ldr	r3, [pc, #32]	; (8002180 <xTaskGetSchedulerState+0x38>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d102      	bne.n	800216a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002164:	2302      	movs	r3, #2
 8002166:	607b      	str	r3, [r7, #4]
 8002168:	e001      	b.n	800216e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800216a:	2300      	movs	r3, #0
 800216c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800216e:	687b      	ldr	r3, [r7, #4]
	}
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	200003d8 	.word	0x200003d8
 8002180:	200003f4 	.word	0x200003f4

08002184 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800218e:	4b29      	ldr	r3, [pc, #164]	; (8002234 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002194:	4b28      	ldr	r3, [pc, #160]	; (8002238 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	3304      	adds	r3, #4
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff faf0 	bl	8001780 <uxListRemove>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10b      	bne.n	80021be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80021a6:	4b24      	ldr	r3, [pc, #144]	; (8002238 <prvAddCurrentTaskToDelayedList+0xb4>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ac:	2201      	movs	r2, #1
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43da      	mvns	r2, r3
 80021b4:	4b21      	ldr	r3, [pc, #132]	; (800223c <prvAddCurrentTaskToDelayedList+0xb8>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4013      	ands	r3, r2
 80021ba:	4a20      	ldr	r2, [pc, #128]	; (800223c <prvAddCurrentTaskToDelayedList+0xb8>)
 80021bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c4:	d10a      	bne.n	80021dc <prvAddCurrentTaskToDelayedList+0x58>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d007      	beq.n	80021dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021cc:	4b1a      	ldr	r3, [pc, #104]	; (8002238 <prvAddCurrentTaskToDelayedList+0xb4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	3304      	adds	r3, #4
 80021d2:	4619      	mov	r1, r3
 80021d4:	481a      	ldr	r0, [pc, #104]	; (8002240 <prvAddCurrentTaskToDelayedList+0xbc>)
 80021d6:	f7ff fa78 	bl	80016ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80021da:	e026      	b.n	800222a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4413      	add	r3, r2
 80021e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80021e4:	4b14      	ldr	r3, [pc, #80]	; (8002238 <prvAddCurrentTaskToDelayedList+0xb4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d209      	bcs.n	8002208 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021f4:	4b13      	ldr	r3, [pc, #76]	; (8002244 <prvAddCurrentTaskToDelayedList+0xc0>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <prvAddCurrentTaskToDelayedList+0xb4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	3304      	adds	r3, #4
 80021fe:	4619      	mov	r1, r3
 8002200:	4610      	mov	r0, r2
 8002202:	f7ff fa85 	bl	8001710 <vListInsert>
}
 8002206:	e010      	b.n	800222a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002208:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <prvAddCurrentTaskToDelayedList+0xc4>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <prvAddCurrentTaskToDelayedList+0xb4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	3304      	adds	r3, #4
 8002212:	4619      	mov	r1, r3
 8002214:	4610      	mov	r0, r2
 8002216:	f7ff fa7b 	bl	8001710 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800221a:	4b0c      	ldr	r3, [pc, #48]	; (800224c <prvAddCurrentTaskToDelayedList+0xc8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	429a      	cmp	r2, r3
 8002222:	d202      	bcs.n	800222a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002224:	4a09      	ldr	r2, [pc, #36]	; (800224c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	6013      	str	r3, [r2, #0]
}
 800222a:	bf00      	nop
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	200003d0 	.word	0x200003d0
 8002238:	200002cc 	.word	0x200002cc
 800223c:	200003d4 	.word	0x200003d4
 8002240:	200003b8 	.word	0x200003b8
 8002244:	20000388 	.word	0x20000388
 8002248:	20000384 	.word	0x20000384
 800224c:	200003ec 	.word	0x200003ec

08002250 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	3b04      	subs	r3, #4
 8002260:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002268:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	3b04      	subs	r3, #4
 800226e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	f023 0201 	bic.w	r2, r3, #1
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	3b04      	subs	r3, #4
 800227e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002280:	4a08      	ldr	r2, [pc, #32]	; (80022a4 <pxPortInitialiseStack+0x54>)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	3b14      	subs	r3, #20
 800228a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	3b20      	subs	r3, #32
 8002296:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002298:	68fb      	ldr	r3, [r7, #12]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr
 80022a4:	080022a9 	.word	0x080022a9

080022a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80022b2:	4b12      	ldr	r3, [pc, #72]	; (80022fc <prvTaskExitError+0x54>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ba:	d00a      	beq.n	80022d2 <prvTaskExitError+0x2a>
	__asm volatile
 80022bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c0:	f383 8811 	msr	BASEPRI, r3
 80022c4:	f3bf 8f6f 	isb	sy
 80022c8:	f3bf 8f4f 	dsb	sy
 80022cc:	60fb      	str	r3, [r7, #12]
}
 80022ce:	bf00      	nop
 80022d0:	e7fe      	b.n	80022d0 <prvTaskExitError+0x28>
	__asm volatile
 80022d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d6:	f383 8811 	msr	BASEPRI, r3
 80022da:	f3bf 8f6f 	isb	sy
 80022de:	f3bf 8f4f 	dsb	sy
 80022e2:	60bb      	str	r3, [r7, #8]
}
 80022e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80022e6:	bf00      	nop
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0fc      	beq.n	80022e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80022ee:	bf00      	nop
 80022f0:	bf00      	nop
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	2000000c 	.word	0x2000000c

08002300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002300:	4b07      	ldr	r3, [pc, #28]	; (8002320 <pxCurrentTCBConst2>)
 8002302:	6819      	ldr	r1, [r3, #0]
 8002304:	6808      	ldr	r0, [r1, #0]
 8002306:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800230a:	f380 8809 	msr	PSP, r0
 800230e:	f3bf 8f6f 	isb	sy
 8002312:	f04f 0000 	mov.w	r0, #0
 8002316:	f380 8811 	msr	BASEPRI, r0
 800231a:	f04e 0e0d 	orr.w	lr, lr, #13
 800231e:	4770      	bx	lr

08002320 <pxCurrentTCBConst2>:
 8002320:	200002cc 	.word	0x200002cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002324:	bf00      	nop
 8002326:	bf00      	nop

08002328 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002328:	4806      	ldr	r0, [pc, #24]	; (8002344 <prvPortStartFirstTask+0x1c>)
 800232a:	6800      	ldr	r0, [r0, #0]
 800232c:	6800      	ldr	r0, [r0, #0]
 800232e:	f380 8808 	msr	MSP, r0
 8002332:	b662      	cpsie	i
 8002334:	b661      	cpsie	f
 8002336:	f3bf 8f4f 	dsb	sy
 800233a:	f3bf 8f6f 	isb	sy
 800233e:	df00      	svc	0
 8002340:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002342:	bf00      	nop
 8002344:	e000ed08 	.word	0xe000ed08

08002348 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800234e:	4b32      	ldr	r3, [pc, #200]	; (8002418 <xPortStartScheduler+0xd0>)
 8002350:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	b2db      	uxtb	r3, r3
 8002358:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	22ff      	movs	r2, #255	; 0xff
 800235e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	b2db      	uxtb	r3, r3
 800236c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002370:	b2da      	uxtb	r2, r3
 8002372:	4b2a      	ldr	r3, [pc, #168]	; (800241c <xPortStartScheduler+0xd4>)
 8002374:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002376:	4b2a      	ldr	r3, [pc, #168]	; (8002420 <xPortStartScheduler+0xd8>)
 8002378:	2207      	movs	r2, #7
 800237a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800237c:	e009      	b.n	8002392 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800237e:	4b28      	ldr	r3, [pc, #160]	; (8002420 <xPortStartScheduler+0xd8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	3b01      	subs	r3, #1
 8002384:	4a26      	ldr	r2, [pc, #152]	; (8002420 <xPortStartScheduler+0xd8>)
 8002386:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002388:	78fb      	ldrb	r3, [r7, #3]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	b2db      	uxtb	r3, r3
 8002390:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800239a:	2b80      	cmp	r3, #128	; 0x80
 800239c:	d0ef      	beq.n	800237e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800239e:	4b20      	ldr	r3, [pc, #128]	; (8002420 <xPortStartScheduler+0xd8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f1c3 0307 	rsb	r3, r3, #7
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d00a      	beq.n	80023c0 <xPortStartScheduler+0x78>
	__asm volatile
 80023aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ae:	f383 8811 	msr	BASEPRI, r3
 80023b2:	f3bf 8f6f 	isb	sy
 80023b6:	f3bf 8f4f 	dsb	sy
 80023ba:	60bb      	str	r3, [r7, #8]
}
 80023bc:	bf00      	nop
 80023be:	e7fe      	b.n	80023be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80023c0:	4b17      	ldr	r3, [pc, #92]	; (8002420 <xPortStartScheduler+0xd8>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	021b      	lsls	r3, r3, #8
 80023c6:	4a16      	ldr	r2, [pc, #88]	; (8002420 <xPortStartScheduler+0xd8>)
 80023c8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80023ca:	4b15      	ldr	r3, [pc, #84]	; (8002420 <xPortStartScheduler+0xd8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023d2:	4a13      	ldr	r2, [pc, #76]	; (8002420 <xPortStartScheduler+0xd8>)
 80023d4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80023de:	4b11      	ldr	r3, [pc, #68]	; (8002424 <xPortStartScheduler+0xdc>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a10      	ldr	r2, [pc, #64]	; (8002424 <xPortStartScheduler+0xdc>)
 80023e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80023ea:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <xPortStartScheduler+0xdc>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a0d      	ldr	r2, [pc, #52]	; (8002424 <xPortStartScheduler+0xdc>)
 80023f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80023f4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80023f6:	f000 f8b9 	bl	800256c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80023fa:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <xPortStartScheduler+0xe0>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002400:	f7ff ff92 	bl	8002328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002404:	f7ff fd6c 	bl	8001ee0 <vTaskSwitchContext>
	prvTaskExitError();
 8002408:	f7ff ff4e 	bl	80022a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	e000e400 	.word	0xe000e400
 800241c:	200003f8 	.word	0x200003f8
 8002420:	200003fc 	.word	0x200003fc
 8002424:	e000ed20 	.word	0xe000ed20
 8002428:	2000000c 	.word	0x2000000c

0800242c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
	__asm volatile
 8002432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002436:	f383 8811 	msr	BASEPRI, r3
 800243a:	f3bf 8f6f 	isb	sy
 800243e:	f3bf 8f4f 	dsb	sy
 8002442:	607b      	str	r3, [r7, #4]
}
 8002444:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002446:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <vPortEnterCritical+0x58>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	3301      	adds	r3, #1
 800244c:	4a0d      	ldr	r2, [pc, #52]	; (8002484 <vPortEnterCritical+0x58>)
 800244e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <vPortEnterCritical+0x58>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d10f      	bne.n	8002478 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002458:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <vPortEnterCritical+0x5c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00a      	beq.n	8002478 <vPortEnterCritical+0x4c>
	__asm volatile
 8002462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002466:	f383 8811 	msr	BASEPRI, r3
 800246a:	f3bf 8f6f 	isb	sy
 800246e:	f3bf 8f4f 	dsb	sy
 8002472:	603b      	str	r3, [r7, #0]
}
 8002474:	bf00      	nop
 8002476:	e7fe      	b.n	8002476 <vPortEnterCritical+0x4a>
	}
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	2000000c 	.word	0x2000000c
 8002488:	e000ed04 	.word	0xe000ed04

0800248c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <vPortExitCritical+0x4c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10a      	bne.n	80024b0 <vPortExitCritical+0x24>
	__asm volatile
 800249a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249e:	f383 8811 	msr	BASEPRI, r3
 80024a2:	f3bf 8f6f 	isb	sy
 80024a6:	f3bf 8f4f 	dsb	sy
 80024aa:	607b      	str	r3, [r7, #4]
}
 80024ac:	bf00      	nop
 80024ae:	e7fe      	b.n	80024ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80024b0:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <vPortExitCritical+0x4c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	3b01      	subs	r3, #1
 80024b6:	4a08      	ldr	r2, [pc, #32]	; (80024d8 <vPortExitCritical+0x4c>)
 80024b8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80024ba:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <vPortExitCritical+0x4c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d105      	bne.n	80024ce <vPortExitCritical+0x42>
 80024c2:	2300      	movs	r3, #0
 80024c4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80024cc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr
 80024d8:	2000000c 	.word	0x2000000c
 80024dc:	00000000 	.word	0x00000000

080024e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80024e0:	f3ef 8009 	mrs	r0, PSP
 80024e4:	f3bf 8f6f 	isb	sy
 80024e8:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <pxCurrentTCBConst>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80024f0:	6010      	str	r0, [r2, #0]
 80024f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80024f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80024fa:	f380 8811 	msr	BASEPRI, r0
 80024fe:	f7ff fcef 	bl	8001ee0 <vTaskSwitchContext>
 8002502:	f04f 0000 	mov.w	r0, #0
 8002506:	f380 8811 	msr	BASEPRI, r0
 800250a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800250e:	6819      	ldr	r1, [r3, #0]
 8002510:	6808      	ldr	r0, [r1, #0]
 8002512:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002516:	f380 8809 	msr	PSP, r0
 800251a:	f3bf 8f6f 	isb	sy
 800251e:	4770      	bx	lr

08002520 <pxCurrentTCBConst>:
 8002520:	200002cc 	.word	0x200002cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop

08002528 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
	__asm volatile
 800252e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002532:	f383 8811 	msr	BASEPRI, r3
 8002536:	f3bf 8f6f 	isb	sy
 800253a:	f3bf 8f4f 	dsb	sy
 800253e:	607b      	str	r3, [r7, #4]
}
 8002540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002542:	f7ff fc0f 	bl	8001d64 <xTaskIncrementTick>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800254c:	4b06      	ldr	r3, [pc, #24]	; (8002568 <xPortSysTickHandler+0x40>)
 800254e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	2300      	movs	r3, #0
 8002556:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	f383 8811 	msr	BASEPRI, r3
}
 800255e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002560:	bf00      	nop
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	e000ed04 	.word	0xe000ed04

0800256c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002570:	4b0a      	ldr	r3, [pc, #40]	; (800259c <vPortSetupTimerInterrupt+0x30>)
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002576:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <vPortSetupTimerInterrupt+0x34>)
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800257c:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <vPortSetupTimerInterrupt+0x38>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a09      	ldr	r2, [pc, #36]	; (80025a8 <vPortSetupTimerInterrupt+0x3c>)
 8002582:	fba2 2303 	umull	r2, r3, r2, r3
 8002586:	099b      	lsrs	r3, r3, #6
 8002588:	4a08      	ldr	r2, [pc, #32]	; (80025ac <vPortSetupTimerInterrupt+0x40>)
 800258a:	3b01      	subs	r3, #1
 800258c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800258e:	4b03      	ldr	r3, [pc, #12]	; (800259c <vPortSetupTimerInterrupt+0x30>)
 8002590:	2207      	movs	r2, #7
 8002592:	601a      	str	r2, [r3, #0]
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr
 800259c:	e000e010 	.word	0xe000e010
 80025a0:	e000e018 	.word	0xe000e018
 80025a4:	20000000 	.word	0x20000000
 80025a8:	10624dd3 	.word	0x10624dd3
 80025ac:	e000e014 	.word	0xe000e014

080025b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	; 0x28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80025bc:	f7ff fb28 	bl	8001c10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80025c0:	4b58      	ldr	r3, [pc, #352]	; (8002724 <pvPortMalloc+0x174>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80025c8:	f000 f910 	bl	80027ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80025cc:	4b56      	ldr	r3, [pc, #344]	; (8002728 <pvPortMalloc+0x178>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f040 808e 	bne.w	80026f6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d01d      	beq.n	800261c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80025e0:	2208      	movs	r2, #8
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4413      	add	r3, r2
 80025e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d014      	beq.n	800261c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f023 0307 	bic.w	r3, r3, #7
 80025f8:	3308      	adds	r3, #8
 80025fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00a      	beq.n	800261c <pvPortMalloc+0x6c>
	__asm volatile
 8002606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260a:	f383 8811 	msr	BASEPRI, r3
 800260e:	f3bf 8f6f 	isb	sy
 8002612:	f3bf 8f4f 	dsb	sy
 8002616:	617b      	str	r3, [r7, #20]
}
 8002618:	bf00      	nop
 800261a:	e7fe      	b.n	800261a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d069      	beq.n	80026f6 <pvPortMalloc+0x146>
 8002622:	4b42      	ldr	r3, [pc, #264]	; (800272c <pvPortMalloc+0x17c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	429a      	cmp	r2, r3
 800262a:	d864      	bhi.n	80026f6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800262c:	4b40      	ldr	r3, [pc, #256]	; (8002730 <pvPortMalloc+0x180>)
 800262e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002630:	4b3f      	ldr	r3, [pc, #252]	; (8002730 <pvPortMalloc+0x180>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002636:	e004      	b.n	8002642 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	429a      	cmp	r2, r3
 800264a:	d903      	bls.n	8002654 <pvPortMalloc+0xa4>
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1f1      	bne.n	8002638 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002654:	4b33      	ldr	r3, [pc, #204]	; (8002724 <pvPortMalloc+0x174>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800265a:	429a      	cmp	r2, r3
 800265c:	d04b      	beq.n	80026f6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2208      	movs	r2, #8
 8002664:	4413      	add	r3, r2
 8002666:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	1ad2      	subs	r2, r2, r3
 8002678:	2308      	movs	r3, #8
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	429a      	cmp	r2, r3
 800267e:	d91f      	bls.n	80026c0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4413      	add	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00a      	beq.n	80026a8 <pvPortMalloc+0xf8>
	__asm volatile
 8002692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002696:	f383 8811 	msr	BASEPRI, r3
 800269a:	f3bf 8f6f 	isb	sy
 800269e:	f3bf 8f4f 	dsb	sy
 80026a2:	613b      	str	r3, [r7, #16]
}
 80026a4:	bf00      	nop
 80026a6:	e7fe      	b.n	80026a6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	1ad2      	subs	r2, r2, r3
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80026ba:	69b8      	ldr	r0, [r7, #24]
 80026bc:	f000 f8f8 	bl	80028b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80026c0:	4b1a      	ldr	r3, [pc, #104]	; (800272c <pvPortMalloc+0x17c>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	4a18      	ldr	r2, [pc, #96]	; (800272c <pvPortMalloc+0x17c>)
 80026cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80026ce:	4b17      	ldr	r3, [pc, #92]	; (800272c <pvPortMalloc+0x17c>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	4b18      	ldr	r3, [pc, #96]	; (8002734 <pvPortMalloc+0x184>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d203      	bcs.n	80026e2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80026da:	4b14      	ldr	r3, [pc, #80]	; (800272c <pvPortMalloc+0x17c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a15      	ldr	r2, [pc, #84]	; (8002734 <pvPortMalloc+0x184>)
 80026e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	4b10      	ldr	r3, [pc, #64]	; (8002728 <pvPortMalloc+0x178>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	431a      	orrs	r2, r3
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80026f6:	f7ff fa99 	bl	8001c2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00a      	beq.n	800271a <pvPortMalloc+0x16a>
	__asm volatile
 8002704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002708:	f383 8811 	msr	BASEPRI, r3
 800270c:	f3bf 8f6f 	isb	sy
 8002710:	f3bf 8f4f 	dsb	sy
 8002714:	60fb      	str	r3, [r7, #12]
}
 8002716:	bf00      	nop
 8002718:	e7fe      	b.n	8002718 <pvPortMalloc+0x168>
	return pvReturn;
 800271a:	69fb      	ldr	r3, [r7, #28]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3728      	adds	r7, #40	; 0x28
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20001008 	.word	0x20001008
 8002728:	20001014 	.word	0x20001014
 800272c:	2000100c 	.word	0x2000100c
 8002730:	20001000 	.word	0x20001000
 8002734:	20001010 	.word	0x20001010

08002738 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d048      	beq.n	80027dc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800274a:	2308      	movs	r3, #8
 800274c:	425b      	negs	r3, r3
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	4413      	add	r3, r2
 8002752:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	4b21      	ldr	r3, [pc, #132]	; (80027e4 <vPortFree+0xac>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4013      	ands	r3, r2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10a      	bne.n	800277c <vPortFree+0x44>
	__asm volatile
 8002766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276a:	f383 8811 	msr	BASEPRI, r3
 800276e:	f3bf 8f6f 	isb	sy
 8002772:	f3bf 8f4f 	dsb	sy
 8002776:	60fb      	str	r3, [r7, #12]
}
 8002778:	bf00      	nop
 800277a:	e7fe      	b.n	800277a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00a      	beq.n	800279a <vPortFree+0x62>
	__asm volatile
 8002784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002788:	f383 8811 	msr	BASEPRI, r3
 800278c:	f3bf 8f6f 	isb	sy
 8002790:	f3bf 8f4f 	dsb	sy
 8002794:	60bb      	str	r3, [r7, #8]
}
 8002796:	bf00      	nop
 8002798:	e7fe      	b.n	8002798 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <vPortFree+0xac>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4013      	ands	r3, r2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d019      	beq.n	80027dc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d115      	bne.n	80027dc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <vPortFree+0xac>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	401a      	ands	r2, r3
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80027c0:	f7ff fa26 	bl	8001c10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	4b07      	ldr	r3, [pc, #28]	; (80027e8 <vPortFree+0xb0>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4413      	add	r3, r2
 80027ce:	4a06      	ldr	r2, [pc, #24]	; (80027e8 <vPortFree+0xb0>)
 80027d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80027d2:	6938      	ldr	r0, [r7, #16]
 80027d4:	f000 f86c 	bl	80028b0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80027d8:	f7ff fa28 	bl	8001c2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80027dc:	bf00      	nop
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20001014 	.word	0x20001014
 80027e8:	2000100c 	.word	0x2000100c

080027ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80027f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80027f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80027f8:	4b27      	ldr	r3, [pc, #156]	; (8002898 <prvHeapInit+0xac>)
 80027fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00c      	beq.n	8002820 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	3307      	adds	r3, #7
 800280a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f023 0307 	bic.w	r3, r3, #7
 8002812:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002814:	68ba      	ldr	r2, [r7, #8]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	4a1f      	ldr	r2, [pc, #124]	; (8002898 <prvHeapInit+0xac>)
 800281c:	4413      	add	r3, r2
 800281e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002824:	4a1d      	ldr	r2, [pc, #116]	; (800289c <prvHeapInit+0xb0>)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800282a:	4b1c      	ldr	r3, [pc, #112]	; (800289c <prvHeapInit+0xb0>)
 800282c:	2200      	movs	r2, #0
 800282e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	4413      	add	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002838:	2208      	movs	r2, #8
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	1a9b      	subs	r3, r3, r2
 800283e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f023 0307 	bic.w	r3, r3, #7
 8002846:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4a15      	ldr	r2, [pc, #84]	; (80028a0 <prvHeapInit+0xb4>)
 800284c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800284e:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <prvHeapInit+0xb4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2200      	movs	r2, #0
 8002854:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002856:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <prvHeapInit+0xb4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	1ad2      	subs	r2, r2, r3
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <prvHeapInit+0xb4>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	4a0a      	ldr	r2, [pc, #40]	; (80028a4 <prvHeapInit+0xb8>)
 800287a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4a09      	ldr	r2, [pc, #36]	; (80028a8 <prvHeapInit+0xbc>)
 8002882:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002884:	4b09      	ldr	r3, [pc, #36]	; (80028ac <prvHeapInit+0xc0>)
 8002886:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800288a:	601a      	str	r2, [r3, #0]
}
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	20000400 	.word	0x20000400
 800289c:	20001000 	.word	0x20001000
 80028a0:	20001008 	.word	0x20001008
 80028a4:	20001010 	.word	0x20001010
 80028a8:	2000100c 	.word	0x2000100c
 80028ac:	20001014 	.word	0x20001014

080028b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80028b8:	4b27      	ldr	r3, [pc, #156]	; (8002958 <prvInsertBlockIntoFreeList+0xa8>)
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	e002      	b.n	80028c4 <prvInsertBlockIntoFreeList+0x14>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d8f7      	bhi.n	80028be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	4413      	add	r3, r2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d108      	bne.n	80028f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	441a      	add	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	441a      	add	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d118      	bne.n	8002938 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	4b14      	ldr	r3, [pc, #80]	; (800295c <prvInsertBlockIntoFreeList+0xac>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d00d      	beq.n	800292e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	441a      	add	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	e008      	b.n	8002940 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800292e:	4b0b      	ldr	r3, [pc, #44]	; (800295c <prvInsertBlockIntoFreeList+0xac>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	e003      	b.n	8002940 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	429a      	cmp	r2, r3
 8002946:	d002      	beq.n	800294e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	20001000 	.word	0x20001000
 800295c:	20001008 	.word	0x20001008

08002960 <__libc_init_array>:
 8002960:	b570      	push	{r4, r5, r6, lr}
 8002962:	2600      	movs	r6, #0
 8002964:	4d0c      	ldr	r5, [pc, #48]	; (8002998 <__libc_init_array+0x38>)
 8002966:	4c0d      	ldr	r4, [pc, #52]	; (800299c <__libc_init_array+0x3c>)
 8002968:	1b64      	subs	r4, r4, r5
 800296a:	10a4      	asrs	r4, r4, #2
 800296c:	42a6      	cmp	r6, r4
 800296e:	d109      	bne.n	8002984 <__libc_init_array+0x24>
 8002970:	f000 f822 	bl	80029b8 <_init>
 8002974:	2600      	movs	r6, #0
 8002976:	4d0a      	ldr	r5, [pc, #40]	; (80029a0 <__libc_init_array+0x40>)
 8002978:	4c0a      	ldr	r4, [pc, #40]	; (80029a4 <__libc_init_array+0x44>)
 800297a:	1b64      	subs	r4, r4, r5
 800297c:	10a4      	asrs	r4, r4, #2
 800297e:	42a6      	cmp	r6, r4
 8002980:	d105      	bne.n	800298e <__libc_init_array+0x2e>
 8002982:	bd70      	pop	{r4, r5, r6, pc}
 8002984:	f855 3b04 	ldr.w	r3, [r5], #4
 8002988:	4798      	blx	r3
 800298a:	3601      	adds	r6, #1
 800298c:	e7ee      	b.n	800296c <__libc_init_array+0xc>
 800298e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002992:	4798      	blx	r3
 8002994:	3601      	adds	r6, #1
 8002996:	e7f2      	b.n	800297e <__libc_init_array+0x1e>
 8002998:	08002a28 	.word	0x08002a28
 800299c:	08002a28 	.word	0x08002a28
 80029a0:	08002a28 	.word	0x08002a28
 80029a4:	08002a2c 	.word	0x08002a2c

080029a8 <memset>:
 80029a8:	4603      	mov	r3, r0
 80029aa:	4402      	add	r2, r0
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d100      	bne.n	80029b2 <memset+0xa>
 80029b0:	4770      	bx	lr
 80029b2:	f803 1b01 	strb.w	r1, [r3], #1
 80029b6:	e7f9      	b.n	80029ac <memset+0x4>

080029b8 <_init>:
 80029b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ba:	bf00      	nop
 80029bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029be:	bc08      	pop	{r3}
 80029c0:	469e      	mov	lr, r3
 80029c2:	4770      	bx	lr

080029c4 <_fini>:
 80029c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c6:	bf00      	nop
 80029c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ca:	bc08      	pop	{r3}
 80029cc:	469e      	mov	lr, r3
 80029ce:	4770      	bx	lr
